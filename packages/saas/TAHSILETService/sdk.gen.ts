// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import type { BaseHttpRequest } from './core/BaseHttpRequest';
import type { GetApiAbpApiDefinitionData, GetApiAbpApiDefinitionResponse, GetApiAbpApplicationConfigurationData, GetApiAbpApplicationConfigurationResponse, GetApiAbpApplicationLocalizationData, GetApiAbpApplicationLocalizationResponse, GetApiAbpMultiTenancyTenantsByNameByNameData, GetApiAbpMultiTenancyTenantsByNameByNameResponse, GetApiAbpMultiTenancyTenantsByIdByIdData, GetApiAbpMultiTenancyTenantsByIdByIdResponse, PostApiAccountRegisterData, PostApiAccountRegisterResponse, PostApiAccountSendPasswordResetCodeData, PostApiAccountSendPasswordResetCodeResponse, PostApiAccountVerifyPasswordResetTokenData, PostApiAccountVerifyPasswordResetTokenResponse, PostApiAccountResetPasswordData, PostApiAccountResetPasswordResponse, PostApiAccountDynamicClaimsRefreshResponse, GetApiSettingManagementEmailingResponse, PostApiSettingManagementEmailingData, PostApiSettingManagementEmailingResponse, PostApiSettingManagementEmailingSendTestEmailData, PostApiSettingManagementEmailingSendTestEmailResponse, GetApiFeatureManagementFeaturesData, GetApiFeatureManagementFeaturesResponse, PutApiFeatureManagementFeaturesData, PutApiFeatureManagementFeaturesResponse, DeleteApiFeatureManagementFeaturesData, DeleteApiFeatureManagementFeaturesResponse, PostApiAccountLoginData, PostApiAccountLoginResponse, GetApiAccountLogoutResponse, PostApiAccountCheckPasswordData, PostApiAccountCheckPasswordResponse, DeleteApiMemberByIdData, DeleteApiMemberByIdResponse, PutApiMemberByIdData, PutApiMemberByIdResponse, PostApiMemberData, PostApiMemberResponse, GetApiMemberData, GetApiMemberResponse, PostApiAppMemberSaveMemberData, PostApiAppMemberSaveMemberResponse, DeleteApiAppMemberByIdMemberData, DeleteApiAppMemberByIdMemberResponse, PutApiAppMemberByIdMemberData, PutApiAppMemberByIdMemberResponse, PostApiAppMemberListMembersData, PostApiAppMemberListMembersResponse, GetApiPermissionManagementPermissionsData, GetApiPermissionManagementPermissionsResponse, PutApiPermissionManagementPermissionsData, PutApiPermissionManagementPermissionsResponse, GetApiAccountMyProfileResponse, PutApiAccountMyProfileData, PutApiAccountMyProfileResponse, PostApiAccountMyProfileChangePasswordData, PostApiAccountMyProfileChangePasswordResponse, GetApiIdentityRolesAllResponse, GetApiIdentityRolesData, GetApiIdentityRolesResponse, PostApiIdentityRolesData, PostApiIdentityRolesResponse, GetApiIdentityRolesByIdData, GetApiIdentityRolesByIdResponse, PutApiIdentityRolesByIdData, PutApiIdentityRolesByIdResponse, DeleteApiIdentityRolesByIdData, DeleteApiIdentityRolesByIdResponse, GetApiMultiTenancyTenantsByIdData, GetApiMultiTenancyTenantsByIdResponse, PutApiMultiTenancyTenantsByIdData, PutApiMultiTenancyTenantsByIdResponse, DeleteApiMultiTenancyTenantsByIdData, DeleteApiMultiTenancyTenantsByIdResponse, GetApiMultiTenancyTenantsData, GetApiMultiTenancyTenantsResponse, PostApiMultiTenancyTenantsData, PostApiMultiTenancyTenantsResponse, GetApiMultiTenancyTenantsByIdDefaultConnectionStringData, GetApiMultiTenancyTenantsByIdDefaultConnectionStringResponse, PutApiMultiTenancyTenantsByIdDefaultConnectionStringData, PutApiMultiTenancyTenantsByIdDefaultConnectionStringResponse, DeleteApiMultiTenancyTenantsByIdDefaultConnectionStringData, DeleteApiMultiTenancyTenantsByIdDefaultConnectionStringResponse, GetApiSettingManagementTimezoneResponse, PostApiSettingManagementTimezoneData, PostApiSettingManagementTimezoneResponse, GetApiSettingManagementTimezoneTimezonesResponse, DeleteApiTransactionByIdData, DeleteApiTransactionByIdResponse, PutApiTransactionByIdData, PutApiTransactionByIdResponse, PostApiTransactionData, PostApiTransactionResponse, GetApiTransactionData, GetApiTransactionResponse, PostApiTransactionClosePaymentsFifoData, PostApiTransactionClosePaymentsFifoResponse, GetApiTransactionListWithPayRecsData, GetApiTransactionListWithPayRecsResponse, GetApiTransactionScoreParamsByCardRefData, GetApiTransactionScoreParamsByCardRefResponse, GetApiTransactionUnpaidTransactionsByMemberIdData, GetApiTransactionUnpaidTransactionsByMemberIdResponse, GetApiTransactionScorePredictionByCardRefData, GetApiTransactionScorePredictionByCardRefResponse, PostApiAppTransactionTransactionData, PostApiAppTransactionTransactionResponse, DeleteApiAppTransactionByIdTransactionData, DeleteApiAppTransactionByIdTransactionResponse, PutApiAppTransactionByIdTransactionData, PutApiAppTransactionByIdTransactionResponse, PostApiAppTransactionListTransactionsData, PostApiAppTransactionListTransactionsResponse, PostApiAppTransactionListWithPayRecsData, PostApiAppTransactionListWithPayRecsResponse, PostApiAppTransactionClosePaymentsFIfoData, PostApiAppTransactionClosePaymentsFIfoResponse, GetApiAppTransactionScoreParamsData, GetApiAppTransactionScoreParamsResponse, GetApiAppTransactionUnpaidTransactionsByMemberIdData, GetApiAppTransactionUnpaidTransactionsByMemberIdResponse, GetApiAppTransactionScorePredictionData, GetApiAppTransactionScorePredictionResponse, GetApiIdentityUsersByIdData, GetApiIdentityUsersByIdResponse, PutApiIdentityUsersByIdData, PutApiIdentityUsersByIdResponse, DeleteApiIdentityUsersByIdData, DeleteApiIdentityUsersByIdResponse, GetApiIdentityUsersData, GetApiIdentityUsersResponse, PostApiIdentityUsersData, PostApiIdentityUsersResponse, GetApiIdentityUsersByIdRolesData, GetApiIdentityUsersByIdRolesResponse, PutApiIdentityUsersByIdRolesData, PutApiIdentityUsersByIdRolesResponse, GetApiIdentityUsersAssignableRolesResponse, GetApiIdentityUsersByUsernameByUserNameData, GetApiIdentityUsersByUsernameByUserNameResponse, GetApiIdentityUsersByEmailByEmailData, GetApiIdentityUsersByEmailByEmailResponse, GetApiIdentityUsersLookupByIdData, GetApiIdentityUsersLookupByIdResponse, GetApiIdentityUsersLookupByUsernameByUserNameData, GetApiIdentityUsersLookupByUsernameByUserNameResponse, GetApiIdentityUsersLookupSearchData, GetApiIdentityUsersLookupSearchResponse, GetApiIdentityUsersLookupCountData, GetApiIdentityUsersLookupCountResponse } from './types.gen';

export class AbpApiDefinitionService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * @param data The data for the request.
     * @param data.覺ncludeTypes
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiAbpApiDefinition(data: GetApiAbpApiDefinitionData = {}): CancelablePromise<GetApiAbpApiDefinitionResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/abp/api-definition',
            query: {
                IncludeTypes: data.覺ncludeTypes
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
}

export class AbpApplicationConfigurationService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * @param data The data for the request.
     * @param data.覺ncludeLocalizationResources
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiAbpApplicationConfiguration(data: GetApiAbpApplicationConfigurationData = {}): CancelablePromise<GetApiAbpApplicationConfigurationResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/abp/application-configuration',
            query: {
                IncludeLocalizationResources: data.覺ncludeLocalizationResources
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
}

export class AbpApplicationLocalizationService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * @param data The data for the request.
     * @param data.cultureName
     * @param data.onlyDynamics
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiAbpApplicationLocalization(data: GetApiAbpApplicationLocalizationData): CancelablePromise<GetApiAbpApplicationLocalizationResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/abp/application-localization',
            query: {
                CultureName: data.cultureName,
                OnlyDynamics: data.onlyDynamics
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
}

export class AbpTenantService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * @param data The data for the request.
     * @param data.name
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiAbpMultiTenancyTenantsByNameByName(data: GetApiAbpMultiTenancyTenantsByNameByNameData): CancelablePromise<GetApiAbpMultiTenancyTenantsByNameByNameResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/abp/multi-tenancy/tenants/by-name/{name}',
            path: {
                name: data.name
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiAbpMultiTenancyTenantsByIdById(data: GetApiAbpMultiTenancyTenantsByIdByIdData): CancelablePromise<GetApiAbpMultiTenancyTenantsByIdByIdResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/abp/multi-tenancy/tenants/by-id/{id}',
            path: {
                id: data.id
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
}

export class AccountService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public postApiAccountRegister(data: PostApiAccountRegisterData = {}): CancelablePromise<PostApiAccountRegisterResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/account/register',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public postApiAccountSendPasswordResetCode(data: PostApiAccountSendPasswordResetCodeData = {}): CancelablePromise<PostApiAccountSendPasswordResetCodeResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/account/send-password-reset-code',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns boolean OK
     * @throws ApiError
     */
    public postApiAccountVerifyPasswordResetToken(data: PostApiAccountVerifyPasswordResetTokenData = {}): CancelablePromise<PostApiAccountVerifyPasswordResetTokenResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/account/verify-password-reset-token',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public postApiAccountResetPassword(data: PostApiAccountResetPasswordData = {}): CancelablePromise<PostApiAccountResetPasswordResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/account/reset-password',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
}

export class DynamicClaimsService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * @returns unknown OK
     * @throws ApiError
     */
    public postApiAccountDynamicClaimsRefresh(): CancelablePromise<PostApiAccountDynamicClaimsRefreshResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/account/dynamic-claims/refresh',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
}

export class EmailSettingsService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiSettingManagementEmailing(): CancelablePromise<GetApiSettingManagementEmailingResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/setting-management/emailing',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public postApiSettingManagementEmailing(data: PostApiSettingManagementEmailingData = {}): CancelablePromise<PostApiSettingManagementEmailingResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/setting-management/emailing',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public postApiSettingManagementEmailingSendTestEmail(data: PostApiSettingManagementEmailingSendTestEmailData = {}): CancelablePromise<PostApiSettingManagementEmailingSendTestEmailResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/setting-management/emailing/send-test-email',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
}

export class FeaturesService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * @param data The data for the request.
     * @param data.providerName
     * @param data.providerKey
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiFeatureManagementFeatures(data: GetApiFeatureManagementFeaturesData = {}): CancelablePromise<GetApiFeatureManagementFeaturesResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/feature-management/features',
            query: {
                providerName: data.providerName,
                providerKey: data.providerKey
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.providerName
     * @param data.providerKey
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public putApiFeatureManagementFeatures(data: PutApiFeatureManagementFeaturesData = {}): CancelablePromise<PutApiFeatureManagementFeaturesResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/api/feature-management/features',
            query: {
                providerName: data.providerName,
                providerKey: data.providerKey
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.providerName
     * @param data.providerKey
     * @returns unknown OK
     * @throws ApiError
     */
    public deleteApiFeatureManagementFeatures(data: DeleteApiFeatureManagementFeaturesData = {}): CancelablePromise<DeleteApiFeatureManagementFeaturesResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/api/feature-management/features',
            query: {
                providerName: data.providerName,
                providerKey: data.providerKey
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
}

export class LoginService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public postApiAccountLogin(data: PostApiAccountLoginData = {}): CancelablePromise<PostApiAccountLoginResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/account/login',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiAccountLogout(): CancelablePromise<GetApiAccountLogoutResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/account/logout',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public postApiAccountCheckPassword(data: PostApiAccountCheckPasswordData = {}): CancelablePromise<PostApiAccountCheckPasswordResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/account/check-password',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
}

export class MemberService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public deleteApiMemberById(data: DeleteApiMemberByIdData): CancelablePromise<DeleteApiMemberByIdResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/api/member/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public putApiMemberById(data: PutApiMemberByIdData): CancelablePromise<PutApiMemberByIdResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/api/member/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public postApiMember(data: PostApiMemberData = {}): CancelablePromise<PostApiMemberResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/member',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.type
     * @param data.idType
     * @param data.identifier
     * @param data.name
     * @param data.surname
     * @param data.title
     * @param data.tel
     * @param data.mail
     * @param data.isValidated
     * @param data.isEntrepreneur
     * @param data.isInvestor
     * @param data.sorting
     * @param data.skipCount
     * @param data.maxResultCount
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiMember(data: GetApiMemberData = {}): CancelablePromise<GetApiMemberResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/member',
            query: {
                id: data.id,
                Type: data.type,
                idType: data.idType,
                identifier: data.identifier,
                name: data.name,
                surname: data.surname,
                title: data.title,
                tel: data.tel,
                mail: data.mail,
                IsValidated: data.isValidated,
                IsEntrepreneur: data.isEntrepreneur,
                IsInvestor: data.isInvestor,
                Sorting: data.sorting,
                SkipCount: data.skipCount,
                MaxResultCount: data.maxResultCount
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public postApiAppMemberSaveMember(data: PostApiAppMemberSaveMemberData = {}): CancelablePromise<PostApiAppMemberSaveMemberResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/app/member/save-member',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.idType
     * @param data.identifier
     * @returns unknown OK
     * @throws ApiError
     */
    public deleteApiAppMemberByIdMember(data: DeleteApiAppMemberByIdMemberData): CancelablePromise<DeleteApiAppMemberByIdMemberResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/api/app/member/{id}/member',
            path: {
                id: data.id
            },
            query: {
                idType: data.idType,
                identifier: data.identifier
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public putApiAppMemberByIdMember(data: PutApiAppMemberByIdMemberData): CancelablePromise<PutApiAppMemberByIdMemberResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/api/app/member/{id}/member',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public postApiAppMemberListMembers(data: PostApiAppMemberListMembersData = {}): CancelablePromise<PostApiAppMemberListMembersResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/app/member/list-members',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
}

export class PermissionsService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * @param data The data for the request.
     * @param data.providerName
     * @param data.providerKey
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiPermissionManagementPermissions(data: GetApiPermissionManagementPermissionsData = {}): CancelablePromise<GetApiPermissionManagementPermissionsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/permission-management/permissions',
            query: {
                providerName: data.providerName,
                providerKey: data.providerKey
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.providerName
     * @param data.providerKey
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public putApiPermissionManagementPermissions(data: PutApiPermissionManagementPermissionsData = {}): CancelablePromise<PutApiPermissionManagementPermissionsResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/api/permission-management/permissions',
            query: {
                providerName: data.providerName,
                providerKey: data.providerKey
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
}

export class ProfileService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiAccountMyProfile(): CancelablePromise<GetApiAccountMyProfileResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/account/my-profile',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public putApiAccountMyProfile(data: PutApiAccountMyProfileData = {}): CancelablePromise<PutApiAccountMyProfileResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/api/account/my-profile',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public postApiAccountMyProfileChangePassword(data: PostApiAccountMyProfileChangePasswordData = {}): CancelablePromise<PostApiAccountMyProfileChangePasswordResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/account/my-profile/change-password',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
}

export class RoleService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiIdentityRolesAll(): CancelablePromise<GetApiIdentityRolesAllResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/identity/roles/all',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.filter
     * @param data.sorting
     * @param data.skipCount
     * @param data.maxResultCount
     * @param data.extraProperties
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiIdentityRoles(data: GetApiIdentityRolesData = {}): CancelablePromise<GetApiIdentityRolesResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/identity/roles',
            query: {
                Filter: data.filter,
                Sorting: data.sorting,
                SkipCount: data.skipCount,
                MaxResultCount: data.maxResultCount,
                ExtraProperties: data.extraProperties
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public postApiIdentityRoles(data: PostApiIdentityRolesData = {}): CancelablePromise<PostApiIdentityRolesResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/identity/roles',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiIdentityRolesById(data: GetApiIdentityRolesByIdData): CancelablePromise<GetApiIdentityRolesByIdResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/identity/roles/{id}',
            path: {
                id: data.id
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public putApiIdentityRolesById(data: PutApiIdentityRolesByIdData): CancelablePromise<PutApiIdentityRolesByIdResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/api/identity/roles/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public deleteApiIdentityRolesById(data: DeleteApiIdentityRolesByIdData): CancelablePromise<DeleteApiIdentityRolesByIdResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/api/identity/roles/{id}',
            path: {
                id: data.id
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
}

export class TenantService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiMultiTenancyTenantsById(data: GetApiMultiTenancyTenantsByIdData): CancelablePromise<GetApiMultiTenancyTenantsByIdResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/multi-tenancy/tenants/{id}',
            path: {
                id: data.id
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public putApiMultiTenancyTenantsById(data: PutApiMultiTenancyTenantsByIdData): CancelablePromise<PutApiMultiTenancyTenantsByIdResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/api/multi-tenancy/tenants/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public deleteApiMultiTenancyTenantsById(data: DeleteApiMultiTenancyTenantsByIdData): CancelablePromise<DeleteApiMultiTenancyTenantsByIdResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/api/multi-tenancy/tenants/{id}',
            path: {
                id: data.id
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.filter
     * @param data.sorting
     * @param data.skipCount
     * @param data.maxResultCount
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiMultiTenancyTenants(data: GetApiMultiTenancyTenantsData = {}): CancelablePromise<GetApiMultiTenancyTenantsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/multi-tenancy/tenants',
            query: {
                Filter: data.filter,
                Sorting: data.sorting,
                SkipCount: data.skipCount,
                MaxResultCount: data.maxResultCount
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public postApiMultiTenancyTenants(data: PostApiMultiTenancyTenantsData = {}): CancelablePromise<PostApiMultiTenancyTenantsResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/multi-tenancy/tenants',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns string OK
     * @throws ApiError
     */
    public getApiMultiTenancyTenantsByIdDefaultConnectionString(data: GetApiMultiTenancyTenantsByIdDefaultConnectionStringData): CancelablePromise<GetApiMultiTenancyTenantsByIdDefaultConnectionStringResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/multi-tenancy/tenants/{id}/default-connection-string',
            path: {
                id: data.id
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.defaultConnectionString
     * @returns unknown OK
     * @throws ApiError
     */
    public putApiMultiTenancyTenantsByIdDefaultConnectionString(data: PutApiMultiTenancyTenantsByIdDefaultConnectionStringData): CancelablePromise<PutApiMultiTenancyTenantsByIdDefaultConnectionStringResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/api/multi-tenancy/tenants/{id}/default-connection-string',
            path: {
                id: data.id
            },
            query: {
                defaultConnectionString: data.defaultConnectionString
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public deleteApiMultiTenancyTenantsByIdDefaultConnectionString(data: DeleteApiMultiTenancyTenantsByIdDefaultConnectionStringData): CancelablePromise<DeleteApiMultiTenancyTenantsByIdDefaultConnectionStringResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/api/multi-tenancy/tenants/{id}/default-connection-string',
            path: {
                id: data.id
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
}

export class TimeZoneSettingsService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * @returns string OK
     * @throws ApiError
     */
    public getApiSettingManagementTimezone(): CancelablePromise<GetApiSettingManagementTimezoneResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/setting-management/timezone',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.timezone
     * @returns unknown OK
     * @throws ApiError
     */
    public postApiSettingManagementTimezone(data: PostApiSettingManagementTimezoneData = {}): CancelablePromise<PostApiSettingManagementTimezoneResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/setting-management/timezone',
            query: {
                timezone: data.timezone
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiSettingManagementTimezoneTimezones(): CancelablePromise<GetApiSettingManagementTimezoneTimezonesResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/setting-management/timezone/timezones',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
}

export class TransactionService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public deleteApiTransactionById(data: DeleteApiTransactionByIdData): CancelablePromise<DeleteApiTransactionByIdResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/api/transaction/{id}',
            path: {
                id: data.id
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public putApiTransactionById(data: PutApiTransactionByIdData): CancelablePromise<PutApiTransactionByIdResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/api/transaction/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public postApiTransaction(data: PostApiTransactionData = {}): CancelablePromise<PostApiTransactionResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/transaction',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.memberId
     * @param data.transactionType
     * @param data.transactionDate
     * @param data.debit
     * @param data.credit
     * @param data.documentType
     * @param data.logicalRef
     * @param data.sorting
     * @param data.skipCount
     * @param data.maxResultCount
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiTransaction(data: GetApiTransactionData = {}): CancelablePromise<GetApiTransactionResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/transaction',
            query: {
                Id: data.id,
                MemberId: data.memberId,
                TransactionType: data.transactionType,
                TransactionDate: data.transactionDate,
                Debit: data.debit,
                Credit: data.credit,
                DocumentType: data.documentType,
                LogicalRef: data.logicalRef,
                Sorting: data.sorting,
                SkipCount: data.skipCount,
                MaxResultCount: data.maxResultCount
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public postApiTransactionClosePaymentsFifo(data: PostApiTransactionClosePaymentsFifoData = {}): CancelablePromise<PostApiTransactionClosePaymentsFifoResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/transaction/close-payments-fifo',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.memberId
     * @param data.transactionType
     * @param data.transactionDate
     * @param data.debit
     * @param data.credit
     * @param data.documentType
     * @param data.logicalRef
     * @param data.sorting
     * @param data.skipCount
     * @param data.maxResultCount
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiTransactionListWithPayRecs(data: GetApiTransactionListWithPayRecsData = {}): CancelablePromise<GetApiTransactionListWithPayRecsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/transaction/list-with-pay-recs',
            query: {
                Id: data.id,
                MemberId: data.memberId,
                TransactionType: data.transactionType,
                TransactionDate: data.transactionDate,
                Debit: data.debit,
                Credit: data.credit,
                DocumentType: data.documentType,
                LogicalRef: data.logicalRef,
                Sorting: data.sorting,
                SkipCount: data.skipCount,
                MaxResultCount: data.maxResultCount
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.cardRef
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiTransactionScoreParamsByCardRef(data: GetApiTransactionScoreParamsByCardRefData): CancelablePromise<GetApiTransactionScoreParamsByCardRefResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/transaction/score-params/{cardRef}',
            path: {
                cardRef: data.cardRef
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.memberId
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiTransactionUnpaidTransactionsByMemberId(data: GetApiTransactionUnpaidTransactionsByMemberIdData): CancelablePromise<GetApiTransactionUnpaidTransactionsByMemberIdResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/transaction/unpaid-transactions/{memberId}',
            path: {
                memberId: data.memberId
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.cardRef
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiTransactionScorePredictionByCardRef(data: GetApiTransactionScorePredictionByCardRefData): CancelablePromise<GetApiTransactionScorePredictionByCardRefResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/transaction/score-prediction/{cardRef}',
            path: {
                cardRef: data.cardRef
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public postApiAppTransactionTransaction(data: PostApiAppTransactionTransactionData = {}): CancelablePromise<PostApiAppTransactionTransactionResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/app/transaction/transaction',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public deleteApiAppTransactionByIdTransaction(data: DeleteApiAppTransactionByIdTransactionData): CancelablePromise<DeleteApiAppTransactionByIdTransactionResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/api/app/transaction/{id}/transaction',
            path: {
                id: data.id
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public putApiAppTransactionByIdTransaction(data: PutApiAppTransactionByIdTransactionData): CancelablePromise<PutApiAppTransactionByIdTransactionResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/api/app/transaction/{id}/transaction',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public postApiAppTransactionListTransactions(data: PostApiAppTransactionListTransactionsData = {}): CancelablePromise<PostApiAppTransactionListTransactionsResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/app/transaction/list-transactions',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public postApiAppTransactionListWithPayRecs(data: PostApiAppTransactionListWithPayRecsData = {}): CancelablePromise<PostApiAppTransactionListWithPayRecsResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/app/transaction/list-with-pay-recs',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public postApiAppTransactionClosePaymentsFIfo(data: PostApiAppTransactionClosePaymentsFIfoData = {}): CancelablePromise<PostApiAppTransactionClosePaymentsFIfoResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/app/transaction/close-payments-fIFO',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.cardRef
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiAppTransactionScoreParams(data: GetApiAppTransactionScoreParamsData = {}): CancelablePromise<GetApiAppTransactionScoreParamsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/app/transaction/score-params',
            query: {
                cardRef: data.cardRef
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.memberId
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiAppTransactionUnpaidTransactionsByMemberId(data: GetApiAppTransactionUnpaidTransactionsByMemberIdData): CancelablePromise<GetApiAppTransactionUnpaidTransactionsByMemberIdResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/app/transaction/unpaid-transactions/{memberId}',
            path: {
                memberId: data.memberId
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.cardRef
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiAppTransactionScorePrediction(data: GetApiAppTransactionScorePredictionData = {}): CancelablePromise<GetApiAppTransactionScorePredictionResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/app/transaction/score-prediction',
            query: {
                cardRef: data.cardRef
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
}

export class UserService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiIdentityUsersById(data: GetApiIdentityUsersByIdData): CancelablePromise<GetApiIdentityUsersByIdResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/identity/users/{id}',
            path: {
                id: data.id
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public putApiIdentityUsersById(data: PutApiIdentityUsersByIdData): CancelablePromise<PutApiIdentityUsersByIdResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/api/identity/users/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public deleteApiIdentityUsersById(data: DeleteApiIdentityUsersByIdData): CancelablePromise<DeleteApiIdentityUsersByIdResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/api/identity/users/{id}',
            path: {
                id: data.id
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.filter
     * @param data.sorting
     * @param data.skipCount
     * @param data.maxResultCount
     * @param data.extraProperties
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiIdentityUsers(data: GetApiIdentityUsersData = {}): CancelablePromise<GetApiIdentityUsersResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/identity/users',
            query: {
                Filter: data.filter,
                Sorting: data.sorting,
                SkipCount: data.skipCount,
                MaxResultCount: data.maxResultCount,
                ExtraProperties: data.extraProperties
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public postApiIdentityUsers(data: PostApiIdentityUsersData = {}): CancelablePromise<PostApiIdentityUsersResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/identity/users',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiIdentityUsersByIdRoles(data: GetApiIdentityUsersByIdRolesData): CancelablePromise<GetApiIdentityUsersByIdRolesResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/identity/users/{id}/roles',
            path: {
                id: data.id
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public putApiIdentityUsersByIdRoles(data: PutApiIdentityUsersByIdRolesData): CancelablePromise<PutApiIdentityUsersByIdRolesResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/api/identity/users/{id}/roles',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiIdentityUsersAssignableRoles(): CancelablePromise<GetApiIdentityUsersAssignableRolesResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/identity/users/assignable-roles',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.userName
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiIdentityUsersByUsernameByUserName(data: GetApiIdentityUsersByUsernameByUserNameData): CancelablePromise<GetApiIdentityUsersByUsernameByUserNameResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/identity/users/by-username/{userName}',
            path: {
                userName: data.userName
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.email
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiIdentityUsersByEmailByEmail(data: GetApiIdentityUsersByEmailByEmailData): CancelablePromise<GetApiIdentityUsersByEmailByEmailResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/identity/users/by-email/{email}',
            path: {
                email: data.email
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
}

export class UserLookupService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiIdentityUsersLookupById(data: GetApiIdentityUsersLookupByIdData): CancelablePromise<GetApiIdentityUsersLookupByIdResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/identity/users/lookup/{id}',
            path: {
                id: data.id
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.userName
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiIdentityUsersLookupByUsernameByUserName(data: GetApiIdentityUsersLookupByUsernameByUserNameData): CancelablePromise<GetApiIdentityUsersLookupByUsernameByUserNameResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/identity/users/lookup/by-username/{userName}',
            path: {
                userName: data.userName
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.filter
     * @param data.sorting
     * @param data.skipCount
     * @param data.maxResultCount
     * @param data.extraProperties
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiIdentityUsersLookupSearch(data: GetApiIdentityUsersLookupSearchData = {}): CancelablePromise<GetApiIdentityUsersLookupSearchResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/identity/users/lookup/search',
            query: {
                Filter: data.filter,
                Sorting: data.sorting,
                SkipCount: data.skipCount,
                MaxResultCount: data.maxResultCount,
                ExtraProperties: data.extraProperties
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.filter
     * @returns number OK
     * @throws ApiError
     */
    public getApiIdentityUsersLookupCount(data: GetApiIdentityUsersLookupCountData = {}): CancelablePromise<GetApiIdentityUsersLookupCountResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/identity/users/lookup/count',
            query: {
                Filter: data.filter
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
}