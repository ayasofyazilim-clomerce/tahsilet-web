// This file is auto-generated by @hey-api/openapi-ts

export const $ListResultDto_IdentityRoleDto = {
    type: 'object',
    properties: {
        items: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    extraProperties: {
                        type: 'object',
                        additionalProperties: {},
                        nullable: true,
                        readOnly: true
                    },
                    id: {
                        type: 'string',
                        format: 'uuid'
                    },
                    name: {
                        type: 'string',
                        nullable: true
                    },
                    isDefault: {
                        type: 'boolean'
                    },
                    isStatic: {
                        type: 'boolean'
                    },
                    isPublic: {
                        type: 'boolean'
                    },
                    concurrencyStamp: {
                        type: 'string',
                        nullable: true
                    }
                },
                additionalProperties: false
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $ListResultDto_UserData = {
    type: 'object',
    properties: {
        items: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    id: {
                        type: 'string',
                        format: 'uuid'
                    },
                    tenantId: {
                        type: 'string',
                        format: 'uuid',
                        nullable: true
                    },
                    userName: {
                        type: 'string',
                        nullable: true
                    },
                    name: {
                        type: 'string',
                        nullable: true
                    },
                    surname: {
                        type: 'string',
                        nullable: true
                    },
                    isActive: {
                        type: 'boolean'
                    },
                    email: {
                        type: 'string',
                        nullable: true
                    },
                    emailConfirmed: {
                        type: 'boolean'
                    },
                    phoneNumber: {
                        type: 'string',
                        nullable: true
                    },
                    phoneNumberConfirmed: {
                        type: 'boolean'
                    },
                    extraProperties: {
                        type: 'object',
                        additionalProperties: {},
                        nullable: true,
                        readOnly: true
                    }
                },
                additionalProperties: false
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $PagedResultDto_IdentityRoleDto = {
    type: 'object',
    properties: {
        items: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    extraProperties: {
                        type: 'object',
                        additionalProperties: {},
                        nullable: true,
                        readOnly: true
                    },
                    id: {
                        type: 'string',
                        format: 'uuid'
                    },
                    name: {
                        type: 'string',
                        nullable: true
                    },
                    isDefault: {
                        type: 'boolean'
                    },
                    isStatic: {
                        type: 'boolean'
                    },
                    isPublic: {
                        type: 'boolean'
                    },
                    concurrencyStamp: {
                        type: 'string',
                        nullable: true
                    }
                },
                additionalProperties: false
            },
            nullable: true
        },
        totalCount: {
            type: 'integer',
            format: 'int64'
        }
    },
    additionalProperties: false
} as const;

export const $PagedResultDto_IdentityUserDto = {
    type: 'object',
    properties: {
        items: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    extraProperties: {
                        type: 'object',
                        additionalProperties: {},
                        nullable: true,
                        readOnly: true
                    },
                    id: {
                        type: 'string',
                        format: 'uuid'
                    },
                    creationTime: {
                        type: 'string',
                        format: 'date-time'
                    },
                    creatorId: {
                        type: 'string',
                        format: 'uuid',
                        nullable: true
                    },
                    lastModificationTime: {
                        type: 'string',
                        format: 'date-time',
                        nullable: true
                    },
                    lastModifierId: {
                        type: 'string',
                        format: 'uuid',
                        nullable: true
                    },
                    isDeleted: {
                        type: 'boolean'
                    },
                    deleterId: {
                        type: 'string',
                        format: 'uuid',
                        nullable: true
                    },
                    deletionTime: {
                        type: 'string',
                        format: 'date-time',
                        nullable: true
                    },
                    tenantId: {
                        type: 'string',
                        format: 'uuid',
                        nullable: true
                    },
                    userName: {
                        type: 'string',
                        nullable: true
                    },
                    name: {
                        type: 'string',
                        nullable: true
                    },
                    surname: {
                        type: 'string',
                        nullable: true
                    },
                    email: {
                        type: 'string',
                        nullable: true
                    },
                    emailConfirmed: {
                        type: 'boolean'
                    },
                    phoneNumber: {
                        type: 'string',
                        nullable: true
                    },
                    phoneNumberConfirmed: {
                        type: 'boolean'
                    },
                    isActive: {
                        type: 'boolean'
                    },
                    lockoutEnabled: {
                        type: 'boolean'
                    },
                    accessFailedCount: {
                        type: 'integer',
                        format: 'int32'
                    },
                    lockoutEnd: {
                        type: 'string',
                        format: 'date-time',
                        nullable: true
                    },
                    concurrencyStamp: {
                        type: 'string',
                        nullable: true
                    },
                    entityVersion: {
                        type: 'integer',
                        format: 'int32'
                    },
                    lastPasswordChangeTime: {
                        type: 'string',
                        format: 'date-time',
                        nullable: true
                    }
                },
                additionalProperties: false
            },
            nullable: true
        },
        totalCount: {
            type: 'integer',
            format: 'int64'
        }
    },
    additionalProperties: false
} as const;

export const $PagedResultDto_ListMemberResponseDto = {
    type: 'object',
    properties: {
        items: {
            type: 'array',
            items: {
                required: ['id', 'identifier', 'idType', 'mail', 'paymentFreqDays', 'type'],
                type: 'object',
                properties: {
                    id: {
                        type: 'string',
                        format: 'uuid'
                    },
                    type: {
                        enum: ['NONE', 'Individual', 'Organization'],
                        type: 'string'
                    },
                    idType: {
                        enum: ['NONE', 'TCKN', 'SCL', 'YKN', 'VKN', 'MKN'],
                        type: 'string'
                    },
                    identifier: {
                        minLength: 1,
                        pattern: '[0-9]{8,11}',
                        type: 'string'
                    },
                    paymentFreqDays: {
                        maximum: 31,
                        minimum: 1,
                        type: 'integer',
                        format: 'int32'
                    },
                    name: {
                        pattern: "^[a-zA-Z*\\s,.'\\-\\p{L}]{1,600}",
                        type: 'string',
                        nullable: true
                    },
                    surname: {
                        pattern: "^[a-zA-Z*\\s,.'\\-\\p{L}]{1,600}",
                        type: 'string',
                        nullable: true
                    },
                    title: {
                        pattern: "^[a-zA-Z0-9*\\s&,.'\\-\\p{L}]{1,600}",
                        type: 'string',
                        nullable: true
                    },
                    tel: {
                        pattern: '([+]\\d{1,2})(\\d{10})',
                        type: 'string',
                        nullable: true
                    },
                    mail: {
                        minLength: 1,
                        pattern: "^[a-zA-Z0-9_!#$%&'*+/=?`{|}~^.-]+@[a-zA-Z0-9.-]+$",
                        type: 'string'
                    },
                    mobile: {
                        pattern: '([+]\\d{1,2})(\\d{10})',
                        type: 'string',
                        nullable: true
                    },
                    isInvestor: {
                        type: 'boolean'
                    },
                    isEntrepreneur: {
                        type: 'boolean'
                    },
                    qualifiedCheck: {
                        type: 'boolean'
                    },
                    fullNameCheck: {
                        type: 'boolean'
                    },
                    isValidated: {
                        type: 'boolean'
                    }
                },
                additionalProperties: false
            },
            nullable: true
        },
        totalCount: {
            type: 'integer',
            format: 'int64'
        }
    },
    additionalProperties: false
} as const;

export const $PagedResultDto_ListTransactionResponseDto = {
    type: 'object',
    properties: {
        items: {
            type: 'array',
            items: {
                required: ['credit', 'debit', 'documentType', 'id', 'logicalRef', 'memberId', 'transactionDate', 'transactionType'],
                type: 'object',
                properties: {
                    id: {
                        type: 'string',
                        format: 'uuid'
                    },
                    memberId: {
                        type: 'string',
                        format: 'uuid'
                    },
                    transactionType: {
                        enum: ['Credit', 'Debit'],
                        type: 'string'
                    },
                    transactionDate: {
                        type: 'string',
                        format: 'date-time'
                    },
                    debit: {
                        type: 'number',
                        format: 'double',
                        nullable: true
                    },
                    credit: {
                        type: 'number',
                        format: 'double',
                        nullable: true
                    },
                    documentType: {
                        enum: ['Invoice', 'Check', 'PromissoryNote', 'CreditCard', 'Cash'],
                        type: 'string'
                    },
                    logicalRef: {
                        type: 'string',
                        nullable: true
                    },
                    payRecs: {
                        type: 'array',
                        items: {
                            required: ['amount', 'logicalRef', 'memberId', 'sign', 'transactionDate'],
                            type: 'object',
                            properties: {
                                creationTime: {
                                    type: 'string',
                                    format: 'date-time'
                                },
                                creatorId: {
                                    type: 'string',
                                    format: 'uuid',
                                    nullable: true
                                },
                                lastModificationTime: {
                                    type: 'string',
                                    format: 'date-time',
                                    nullable: true
                                },
                                lastModifierId: {
                                    type: 'string',
                                    format: 'uuid',
                                    nullable: true
                                },
                                isDeleted: {
                                    type: 'boolean'
                                },
                                deleterId: {
                                    type: 'string',
                                    format: 'uuid',
                                    nullable: true
                                },
                                deletionTime: {
                                    type: 'string',
                                    format: 'date-time',
                                    nullable: true
                                },
                                tenantId: {
                                    type: 'string',
                                    format: 'uuid',
                                    nullable: true,
                                    readOnly: true
                                },
                                sign: {
                                    enum: ['Credit', 'Debit'],
                                    type: 'string'
                                },
                                transactionDate: {
                                    type: 'string',
                                    format: 'date-time'
                                },
                                dueDate: {
                                    type: 'string',
                                    format: 'date-time',
                                    nullable: true
                                },
                                amount: {
                                    type: 'number',
                                    format: 'double'
                                },
                                paidAmount: {
                                    type: 'number',
                                    format: 'double',
                                    nullable: true
                                },
                                logicalRef: {
                                    type: 'string',
                                    nullable: true
                                },
                                ficheRef: {
                                    type: 'string',
                                    nullable: true
                                },
                                crossRef: {
                                    type: 'string',
                                    nullable: true
                                },
                                memberId: {
                                    type: 'string',
                                    format: 'uuid'
                                }
                            },
                            additionalProperties: false
                        },
                        nullable: true
                    }
                },
                additionalProperties: false
            },
            nullable: true
        },
        totalCount: {
            type: 'integer',
            format: 'int64'
        }
    },
    additionalProperties: false
} as const;

export const $PagedResultDto_TenantDto = {
    type: 'object',
    properties: {
        items: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    extraProperties: {
                        type: 'object',
                        additionalProperties: {},
                        nullable: true,
                        readOnly: true
                    },
                    id: {
                        type: 'string',
                        format: 'uuid'
                    },
                    name: {
                        type: 'string',
                        nullable: true
                    },
                    concurrencyStamp: {
                        type: 'string',
                        nullable: true
                    }
                },
                additionalProperties: false
            },
            nullable: true
        },
        totalCount: {
            type: 'integer',
            format: 'int64'
        }
    },
    additionalProperties: false
} as const;

export const $TahsilEt_Members_DeleteMemberDto = {
    required: ['identifier', 'idType'],
    type: 'object',
    properties: {
        idType: {
            enum: ['NONE', 'TCKN', 'SCL', 'YKN', 'VKN', 'MKN'],
            type: 'string'
        },
        identifier: {
            minLength: 1,
            pattern: '[0-9]{8,11}',
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const $TahsilEt_Members_DeleteMemberResponseDto = {
    required: ['kfsReturnMessageRef', 'receiverMessageReference', 'responseCode', 'responseDesc'],
    type: 'object',
    properties: {
        kfsReturnMessageRef: {
            minLength: 1,
            pattern: '[a-zA-Z0-9]{1,20}',
            type: 'string'
        },
        prepDateTime: {
            type: 'string',
            nullable: true
        },
        receiverMessageReference: {
            minLength: 1,
            pattern: '[a-zA-Z0-9]{1,20}',
            type: 'string'
        },
        responseCode: {
            minLength: 1,
            pattern: '[A-Z]{0,2}[0-9]{3,5}',
            type: 'string'
        },
        responseDesc: {
            minLength: 1,
            pattern: '[\\s\\S]*',
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const $TahsilEt_Members_IdType = {
    enum: ['NONE', 'TCKN', 'SCL', 'YKN', 'VKN', 'MKN'],
    type: 'string'
} as const;

export const $TahsilEt_Members_ListMemberResponseDto = {
    required: ['id', 'identifier', 'idType', 'mail', 'paymentFreqDays', 'type'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        type: {
            enum: ['NONE', 'Individual', 'Organization'],
            type: 'string'
        },
        idType: {
            enum: ['NONE', 'TCKN', 'SCL', 'YKN', 'VKN', 'MKN'],
            type: 'string'
        },
        identifier: {
            minLength: 1,
            pattern: '[0-9]{8,11}',
            type: 'string'
        },
        paymentFreqDays: {
            maximum: 31,
            minimum: 1,
            type: 'integer',
            format: 'int32'
        },
        name: {
            pattern: "^[a-zA-Z*\\s,.'\\-\\p{L}]{1,600}",
            type: 'string',
            nullable: true
        },
        surname: {
            pattern: "^[a-zA-Z*\\s,.'\\-\\p{L}]{1,600}",
            type: 'string',
            nullable: true
        },
        title: {
            pattern: "^[a-zA-Z0-9*\\s&,.'\\-\\p{L}]{1,600}",
            type: 'string',
            nullable: true
        },
        tel: {
            pattern: '([+]\\d{1,2})(\\d{10})',
            type: 'string',
            nullable: true
        },
        mail: {
            minLength: 1,
            pattern: "^[a-zA-Z0-9_!#$%&'*+/=?`{|}~^.-]+@[a-zA-Z0-9.-]+$",
            type: 'string'
        },
        mobile: {
            pattern: '([+]\\d{1,2})(\\d{10})',
            type: 'string',
            nullable: true
        },
        isInvestor: {
            type: 'boolean'
        },
        isEntrepreneur: {
            type: 'boolean'
        },
        qualifiedCheck: {
            type: 'boolean'
        },
        fullNameCheck: {
            type: 'boolean'
        },
        isValidated: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const $TahsilEt_Members_MemberFilterDto = {
    type: 'object',
    properties: {
        maxResultCount: {
            maximum: 2147483647,
            minimum: 1,
            type: 'integer',
            format: 'int32'
        },
        skipCount: {
            maximum: 2147483647,
            minimum: 0,
            type: 'integer',
            format: 'int32'
        },
        sorting: {
            type: 'string',
            nullable: true
        },
        id: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        type: {
            enum: ['NONE', 'Individual', 'Organization'],
            type: 'string'
        },
        idType: {
            enum: ['NONE', 'TCKN', 'SCL', 'YKN', 'VKN', 'MKN'],
            type: 'string'
        },
        identifier: {
            type: 'string',
            nullable: true
        },
        name: {
            type: 'string',
            nullable: true
        },
        surname: {
            type: 'string',
            nullable: true
        },
        title: {
            type: 'string',
            nullable: true
        },
        tel: {
            type: 'string',
            nullable: true
        },
        mail: {
            type: 'string',
            nullable: true
        },
        isValidated: {
            type: 'boolean',
            nullable: true
        },
        isEntrepreneur: {
            type: 'boolean',
            nullable: true
        },
        isInvestor: {
            type: 'boolean',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $TahsilEt_Members_SaveMemberDto = {
    required: ['identifier', 'idType', 'mail', 'paymentFreqDays', 'type'],
    type: 'object',
    properties: {
        type: {
            enum: ['NONE', 'Individual', 'Organization'],
            type: 'string'
        },
        idType: {
            enum: ['NONE', 'TCKN', 'SCL', 'YKN', 'VKN', 'MKN'],
            type: 'string'
        },
        identifier: {
            minLength: 1,
            pattern: '[0-9]{8,11}',
            type: 'string'
        },
        paymentFreqDays: {
            maximum: 31,
            minimum: 1,
            type: 'integer',
            format: 'int32'
        },
        name: {
            pattern: "^[a-zA-Z*\\s,.'\\-\\p{L}]{1,600}",
            type: 'string',
            nullable: true
        },
        surname: {
            pattern: "^[a-zA-Z*\\s,.'\\-\\p{L}]{1,600}",
            type: 'string',
            nullable: true
        },
        title: {
            pattern: "^[a-zA-Z0-9*\\s&,.'\\-\\p{L}]{1,600}",
            type: 'string',
            nullable: true
        },
        tel: {
            pattern: '([+]\\d{1,2})(\\d{10})',
            type: 'string',
            nullable: true
        },
        mail: {
            minLength: 1,
            pattern: "^[a-zA-Z0-9_!#$%&'*+/=?`{|}~^.-]+@[a-zA-Z0-9.-]+$",
            type: 'string'
        },
        mobile: {
            pattern: '([+]\\d{1,2})(\\d{10})',
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $TahsilEt_Members_SaveMemberResponseDto = {
    required: ['id'],
    type: 'object',
    properties: {
        kfsReturnMessageRef: {
            pattern: '[a-zA-Z0-9]{1,20}',
            type: 'string',
            nullable: true
        },
        prepDateTime: {
            type: 'string',
            nullable: true
        },
        receiverPlatformId: {
            pattern: '[a-zA-Z_]{1,10}',
            type: 'string',
            nullable: true
        },
        receiverMessageReference: {
            pattern: '[a-zA-Z0-9]{1,20}',
            type: 'string',
            nullable: true
        },
        responseCode: {
            pattern: '[A-Z]{0,2}[0-9]{3,5}',
            type: 'string',
            nullable: true
        },
        responseDesc: {
            pattern: '[\\s\\S]*',
            type: 'string',
            nullable: true
        },
        id: {
            type: 'string',
            format: 'uuid'
        }
    },
    additionalProperties: false
} as const;

export const $TahsilEt_Members_Type = {
    enum: ['NONE', 'Individual', 'Organization'],
    type: 'string'
} as const;

export const $TahsilEt_Members_UpdateMemberDto = {
    required: ['identifier', 'idType', 'paymentFreqDays', 'type'],
    type: 'object',
    properties: {
        type: {
            enum: ['NONE', 'Individual', 'Organization'],
            type: 'string'
        },
        idType: {
            enum: ['NONE', 'TCKN', 'SCL', 'YKN', 'VKN', 'MKN'],
            type: 'string'
        },
        identifier: {
            minLength: 1,
            pattern: '[0-9]{8,11}',
            type: 'string'
        },
        paymentFreqDays: {
            maximum: 31,
            minimum: 1,
            type: 'integer',
            format: 'int32'
        },
        name: {
            pattern: "^[a-zA-Z*\\s,.'\\-\\p{L}]{1,600}",
            type: 'string',
            nullable: true
        },
        surname: {
            pattern: "^[a-zA-Z*\\s,.'\\-\\p{L}]{1,600}",
            type: 'string',
            nullable: true
        },
        title: {
            pattern: "^[a-zA-Z0-9*\\s&,.'\\-\\p{L}]{1,600}",
            type: 'string',
            nullable: true
        },
        tel: {
            pattern: '([+]\\d{1,2})(\\d{10})',
            type: 'string',
            nullable: true
        },
        mobile: {
            pattern: '([+]\\d{1,2})(\\d{10})',
            type: 'string',
            nullable: true
        },
        mail: {
            pattern: "^[a-zA-Z0-9_!#$%&'*+/=?`{|}~^.-]+@[a-zA-Z0-9.-]+$",
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $TahsilEt_Members_UpdateMemberResponseDto = {
    required: ['kfsReturnMessageRef', 'receiverMessageReference', 'receiverPlatformId', 'responseCode', 'responseDesc'],
    type: 'object',
    properties: {
        kfsReturnMessageRef: {
            minLength: 1,
            pattern: '[a-zA-Z0-9]{1,20}',
            type: 'string'
        },
        prepDateTime: {
            type: 'string',
            nullable: true
        },
        receiverPlatformId: {
            minLength: 1,
            pattern: '[a-zA-Z_]{1,10}',
            type: 'string'
        },
        receiverMessageReference: {
            minLength: 1,
            pattern: '[a-zA-Z0-9]{1,20}',
            type: 'string'
        },
        responseCode: {
            minLength: 1,
            pattern: '[A-Z]{0,2}[0-9]{3,5}',
            type: 'string'
        },
        responseDesc: {
            minLength: 1,
            pattern: '[\\s\\S]*',
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const $TahsilEt_PayRecs_Enums_PayRecSign = {
    enum: ['Credit', 'Debit'],
    type: 'string'
} as const;

export const $TahsilEt_PayRecs_PayRecDto = {
    required: ['amount', 'logicalRef', 'memberId', 'sign', 'transactionDate'],
    type: 'object',
    properties: {
        creationTime: {
            type: 'string',
            format: 'date-time'
        },
        creatorId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        lastModificationTime: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        lastModifierId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        isDeleted: {
            type: 'boolean'
        },
        deleterId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        deletionTime: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        tenantId: {
            type: 'string',
            format: 'uuid',
            nullable: true,
            readOnly: true
        },
        sign: {
            enum: ['Credit', 'Debit'],
            type: 'string'
        },
        transactionDate: {
            type: 'string',
            format: 'date-time'
        },
        dueDate: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        amount: {
            type: 'number',
            format: 'double'
        },
        paidAmount: {
            type: 'number',
            format: 'double',
            nullable: true
        },
        logicalRef: {
            type: 'string',
            nullable: true
        },
        ficheRef: {
            type: 'string',
            nullable: true
        },
        crossRef: {
            type: 'string',
            nullable: true
        },
        memberId: {
            type: 'string',
            format: 'uuid'
        }
    },
    additionalProperties: false
} as const;

export const $TahsilEt_Transactions_ClosePaymentsFifoDto = {
    required: ['memberId'],
    type: 'object',
    properties: {
        memberId: {
            type: 'string',
            format: 'uuid'
        }
    },
    additionalProperties: false
} as const;

export const $TahsilEt_Transactions_CreateTransactionDto = {
    required: ['memberId', 'transactionDate', 'transactionType'],
    type: 'object',
    properties: {
        memberId: {
            type: 'string',
            format: 'uuid'
        },
        transactionType: {
            enum: ['Credit', 'Debit'],
            type: 'string'
        },
        transactionDate: {
            type: 'string',
            format: 'date-time'
        },
        debit: {
            type: 'number',
            format: 'double',
            nullable: true
        },
        credit: {
            type: 'number',
            format: 'double',
            nullable: true
        },
        documentType: {
            enum: ['Invoice', 'Check', 'PromissoryNote', 'CreditCard', 'Cash'],
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const $TahsilEt_Transactions_CreateTransactionResponseDto = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        }
    },
    additionalProperties: false
} as const;

export const $TahsilEt_Transactions_DeleteTransactionResponseDto = {
    type: 'object',
    additionalProperties: false
} as const;

export const $TahsilEt_Transactions_Enums_DocumentType = {
    enum: ['Invoice', 'Check', 'PromissoryNote', 'CreditCard', 'Cash'],
    type: 'string'
} as const;

export const $TahsilEt_Transactions_Enums_TransactionType = {
    enum: ['Credit', 'Debit'],
    type: 'string'
} as const;

export const $TahsilEt_Transactions_GetScorePredictionResponseDto = {
    required: ['riskGroup', 'score'],
    type: 'object',
    properties: {
        score: {
            type: 'number',
            format: 'double'
        },
        riskGroup: {
            enum: ['CokIyi', 'Iyi', 'AzRiskli', 'OrtaRiskli', 'CokRiskli'],
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const $TahsilEt_Transactions_ListTransactionResponseDto = {
    required: ['credit', 'debit', 'documentType', 'id', 'logicalRef', 'memberId', 'transactionDate', 'transactionType'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        memberId: {
            type: 'string',
            format: 'uuid'
        },
        transactionType: {
            enum: ['Credit', 'Debit'],
            type: 'string'
        },
        transactionDate: {
            type: 'string',
            format: 'date-time'
        },
        debit: {
            type: 'number',
            format: 'double',
            nullable: true
        },
        credit: {
            type: 'number',
            format: 'double',
            nullable: true
        },
        documentType: {
            enum: ['Invoice', 'Check', 'PromissoryNote', 'CreditCard', 'Cash'],
            type: 'string'
        },
        logicalRef: {
            type: 'string',
            nullable: true
        },
        payRecs: {
            type: 'array',
            items: {
                required: ['amount', 'logicalRef', 'memberId', 'sign', 'transactionDate'],
                type: 'object',
                properties: {
                    creationTime: {
                        type: 'string',
                        format: 'date-time'
                    },
                    creatorId: {
                        type: 'string',
                        format: 'uuid',
                        nullable: true
                    },
                    lastModificationTime: {
                        type: 'string',
                        format: 'date-time',
                        nullable: true
                    },
                    lastModifierId: {
                        type: 'string',
                        format: 'uuid',
                        nullable: true
                    },
                    isDeleted: {
                        type: 'boolean'
                    },
                    deleterId: {
                        type: 'string',
                        format: 'uuid',
                        nullable: true
                    },
                    deletionTime: {
                        type: 'string',
                        format: 'date-time',
                        nullable: true
                    },
                    tenantId: {
                        type: 'string',
                        format: 'uuid',
                        nullable: true,
                        readOnly: true
                    },
                    sign: {
                        enum: ['Credit', 'Debit'],
                        type: 'string'
                    },
                    transactionDate: {
                        type: 'string',
                        format: 'date-time'
                    },
                    dueDate: {
                        type: 'string',
                        format: 'date-time',
                        nullable: true
                    },
                    amount: {
                        type: 'number',
                        format: 'double'
                    },
                    paidAmount: {
                        type: 'number',
                        format: 'double',
                        nullable: true
                    },
                    logicalRef: {
                        type: 'string',
                        nullable: true
                    },
                    ficheRef: {
                        type: 'string',
                        nullable: true
                    },
                    crossRef: {
                        type: 'string',
                        nullable: true
                    },
                    memberId: {
                        type: 'string',
                        format: 'uuid'
                    }
                },
                additionalProperties: false
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $TahsilEt_Transactions_RiskGroup = {
    enum: ['CokIyi', 'Iyi', 'AzRiskli', 'OrtaRiskli', 'CokRiskli'],
    type: 'string'
} as const;

export const $TahsilEt_Transactions_ScoreParamsResponseDto = {
    required: ['averageDaysOutStandingLate', 'averagePaymentDate', 'cardRef', 'paidInvoice', 'procDate', 'riskGroup', 'score', 'sumAmountLateInvoices', 'sumAmountPaidInvoices', 'sumLateOutStanding', 'sumTotalOutStanding', 'totalInvoiceLate', 'totalOutstandingInvoices', 'totalOutStandingLate', 'totalPaidInvoices'],
    type: 'object',
    properties: {
        cardRef: {
            type: 'string',
            nullable: true
        },
        procDate: {
            type: 'string',
            format: 'date-time'
        },
        paidInvoice: {
            type: 'boolean'
        },
        totalPaidInvoices: {
            type: 'integer',
            format: 'int32'
        },
        sumAmountPaidInvoices: {
            type: 'number',
            format: 'double'
        },
        totalInvoiceLate: {
            type: 'integer',
            format: 'int32'
        },
        sumAmountLateInvoices: {
            type: 'number',
            format: 'double'
        },
        totalOutstandingInvoices: {
            type: 'integer',
            format: 'int32'
        },
        totalOutStandingLate: {
            type: 'integer',
            format: 'int32'
        },
        sumTotalOutStanding: {
            type: 'number',
            format: 'double'
        },
        sumLateOutStanding: {
            type: 'number',
            format: 'double'
        },
        averagePaymentDate: {
            type: 'integer',
            format: 'int32'
        },
        averageDaysOutStandingLate: {
            type: 'integer',
            format: 'int32'
        },
        score: {
            type: 'number',
            format: 'double'
        },
        riskGroup: {
            enum: ['CokIyi', 'Iyi', 'AzRiskli', 'OrtaRiskli', 'CokRiskli'],
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const $TahsilEt_Transactions_TransactionFilterDto = {
    type: 'object',
    properties: {
        maxResultCount: {
            maximum: 2147483647,
            minimum: 1,
            type: 'integer',
            format: 'int32'
        },
        skipCount: {
            maximum: 2147483647,
            minimum: 0,
            type: 'integer',
            format: 'int32'
        },
        sorting: {
            type: 'string',
            nullable: true
        },
        id: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        memberId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        transactionType: {
            enum: ['Credit', 'Debit'],
            type: 'string'
        },
        transactionDate: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        debit: {
            type: 'number',
            format: 'double',
            nullable: true
        },
        credit: {
            type: 'number',
            format: 'double',
            nullable: true
        },
        documentType: {
            enum: ['Invoice', 'Check', 'PromissoryNote', 'CreditCard', 'Cash'],
            type: 'string'
        },
        logicalRef: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $TahsilEt_Transactions_UnpaidTransactionDto = {
    required: ['countDaysLate', 'credit', 'debit', 'documentType', 'dueDate', 'id', 'isLate', 'logicalRef', 'memberId', 'transactionDate', 'transactionType'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        memberId: {
            type: 'string',
            format: 'uuid'
        },
        transactionType: {
            enum: ['Credit', 'Debit'],
            type: 'string'
        },
        transactionDate: {
            type: 'string',
            format: 'date-time'
        },
        debit: {
            type: 'number',
            format: 'double',
            nullable: true
        },
        credit: {
            type: 'number',
            format: 'double',
            nullable: true
        },
        dueDate: {
            type: 'string',
            format: 'date-time'
        },
        documentType: {
            enum: ['Invoice', 'Check', 'PromissoryNote', 'CreditCard', 'Cash'],
            type: 'string'
        },
        logicalRef: {
            type: 'string',
            nullable: true
        },
        countDaysLate: {
            type: 'integer',
            format: 'int32'
        },
        isLate: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const $TahsilEt_Transactions_UpdateTransactionDto = {
    type: 'object',
    properties: {
        transactionType: {
            enum: ['Credit', 'Debit'],
            type: 'string'
        },
        transactionDate: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        debit: {
            type: 'number',
            format: 'double',
            nullable: true
        },
        credit: {
            type: 'number',
            format: 'double',
            nullable: true
        },
        documentType: {
            enum: ['Invoice', 'Check', 'PromissoryNote', 'CreditCard', 'Cash'],
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const $TahsilEt_Transactions_UpdateTransactionResponseDto = {
    type: 'object',
    additionalProperties: false
} as const;

export const $Volo_Abp_Account_ChangePasswordInput = {
    required: ['newPassword'],
    type: 'object',
    properties: {
        currentPassword: {
            maxLength: 128,
            minLength: 0,
            type: 'string',
            nullable: true
        },
        newPassword: {
            maxLength: 128,
            minLength: 0,
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_Account_ProfileDto = {
    type: 'object',
    properties: {
        extraProperties: {
            type: 'object',
            additionalProperties: {},
            nullable: true,
            readOnly: true
        },
        userName: {
            type: 'string',
            nullable: true
        },
        email: {
            type: 'string',
            nullable: true
        },
        name: {
            type: 'string',
            nullable: true
        },
        surname: {
            type: 'string',
            nullable: true
        },
        phoneNumber: {
            type: 'string',
            nullable: true
        },
        isExternal: {
            type: 'boolean'
        },
        hasPassword: {
            type: 'boolean'
        },
        concurrencyStamp: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_Account_RegisterDto = {
    required: ['appName', 'emailAddress', 'password', 'userName'],
    type: 'object',
    properties: {
        extraProperties: {
            type: 'object',
            additionalProperties: {},
            nullable: true,
            readOnly: true
        },
        userName: {
            maxLength: 256,
            minLength: 0,
            type: 'string'
        },
        emailAddress: {
            maxLength: 256,
            minLength: 0,
            type: 'string',
            format: 'email'
        },
        password: {
            maxLength: 128,
            minLength: 0,
            type: 'string',
            format: 'password'
        },
        appName: {
            minLength: 1,
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_Account_ResetPasswordDto = {
    required: ['password', 'resetToken'],
    type: 'object',
    properties: {
        userId: {
            type: 'string',
            format: 'uuid'
        },
        resetToken: {
            minLength: 1,
            type: 'string'
        },
        password: {
            minLength: 1,
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_Account_SendPasswordResetCodeDto = {
    required: ['appName', 'email'],
    type: 'object',
    properties: {
        email: {
            maxLength: 256,
            minLength: 0,
            type: 'string',
            format: 'email'
        },
        appName: {
            minLength: 1,
            type: 'string'
        },
        returnUrl: {
            type: 'string',
            nullable: true
        },
        returnUrlHash: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_Account_UpdateProfileDto = {
    type: 'object',
    properties: {
        extraProperties: {
            type: 'object',
            additionalProperties: {},
            nullable: true,
            readOnly: true
        },
        userName: {
            maxLength: 256,
            minLength: 0,
            type: 'string',
            nullable: true
        },
        email: {
            maxLength: 256,
            minLength: 0,
            type: 'string',
            nullable: true
        },
        name: {
            maxLength: 64,
            minLength: 0,
            type: 'string',
            nullable: true
        },
        surname: {
            maxLength: 64,
            minLength: 0,
            type: 'string',
            nullable: true
        },
        phoneNumber: {
            maxLength: 16,
            minLength: 0,
            type: 'string',
            nullable: true
        },
        concurrencyStamp: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_Account_VerifyPasswordResetTokenInput = {
    required: ['resetToken'],
    type: 'object',
    properties: {
        userId: {
            type: 'string',
            format: 'uuid'
        },
        resetToken: {
            minLength: 1,
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_Account_Web_Areas_Account_Controllers_Models_AbpLoginResult = {
    type: 'object',
    properties: {
        result: {
            enum: ['Success', 'InvalidUserNameOrPassword', 'NotAllowed', 'LockedOut', 'RequiresTwoFactor'],
            type: 'string'
        },
        description: {
            type: 'string',
            nullable: true,
            readOnly: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_Account_Web_Areas_Account_Controllers_Models_LoginResultType = {
    enum: ['Success', 'InvalidUserNameOrPassword', 'NotAllowed', 'LockedOut', 'RequiresTwoFactor'],
    type: 'string'
} as const;

export const $Volo_Abp_Account_Web_Areas_Account_Controllers_Models_UserLoginInfo = {
    required: ['password', 'userNameOrEmailAddress'],
    type: 'object',
    properties: {
        userNameOrEmailAddress: {
            maxLength: 255,
            minLength: 0,
            type: 'string'
        },
        password: {
            maxLength: 32,
            minLength: 0,
            type: 'string',
            format: 'password'
        },
        rememberMe: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ApplicationAuthConfigurationDto = {
    type: 'object',
    properties: {
        grantedPolicies: {
            type: 'object',
            additionalProperties: {
                type: 'boolean'
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ApplicationConfigurationDto = {
    type: 'object',
    properties: {
        localization: {
            type: 'object',
            properties: {
                values: {
                    type: 'object',
                    additionalProperties: {
                        type: 'object',
                        additionalProperties: {
                            type: 'string'
                        }
                    },
                    nullable: true
                },
                resources: {
                    type: 'object',
                    additionalProperties: {
                        type: 'object',
                        properties: {
                            texts: {
                                type: 'object',
                                additionalProperties: {
                                    type: 'string'
                                },
                                nullable: true
                            },
                            baseResources: {
                                type: 'array',
                                items: {
                                    type: 'string'
                                },
                                nullable: true
                            }
                        },
                        additionalProperties: false
                    },
                    nullable: true
                },
                languages: {
                    type: 'array',
                    items: {
                        type: 'object',
                        properties: {
                            cultureName: {
                                type: 'string',
                                nullable: true
                            },
                            uiCultureName: {
                                type: 'string',
                                nullable: true
                            },
                            displayName: {
                                type: 'string',
                                nullable: true
                            },
                            twoLetterISOLanguageName: {
                                type: 'string',
                                nullable: true,
                                readOnly: true
                            }
                        },
                        additionalProperties: false
                    },
                    nullable: true
                },
                currentCulture: {
                    type: 'object',
                    properties: {
                        displayName: {
                            type: 'string',
                            nullable: true
                        },
                        englishName: {
                            type: 'string',
                            nullable: true
                        },
                        threeLetterIsoLanguageName: {
                            type: 'string',
                            nullable: true
                        },
                        twoLetterIsoLanguageName: {
                            type: 'string',
                            nullable: true
                        },
                        isRightToLeft: {
                            type: 'boolean'
                        },
                        cultureName: {
                            type: 'string',
                            nullable: true
                        },
                        name: {
                            type: 'string',
                            nullable: true
                        },
                        nativeName: {
                            type: 'string',
                            nullable: true
                        },
                        dateTimeFormat: {
                            type: 'object',
                            properties: {
                                calendarAlgorithmType: {
                                    type: 'string',
                                    nullable: true
                                },
                                dateTimeFormatLong: {
                                    type: 'string',
                                    nullable: true
                                },
                                shortDatePattern: {
                                    type: 'string',
                                    nullable: true
                                },
                                fullDateTimePattern: {
                                    type: 'string',
                                    nullable: true
                                },
                                dateSeparator: {
                                    type: 'string',
                                    nullable: true
                                },
                                shortTimePattern: {
                                    type: 'string',
                                    nullable: true
                                },
                                longTimePattern: {
                                    type: 'string',
                                    nullable: true
                                }
                            },
                            additionalProperties: false
                        }
                    },
                    additionalProperties: false
                },
                defaultResourceName: {
                    type: 'string',
                    nullable: true
                },
                languagesMap: {
                    type: 'object',
                    additionalProperties: {
                        type: 'array',
                        items: {
                            type: 'object',
                            properties: {
                                name: {
                                    type: 'string',
                                    nullable: true
                                },
                                value: {
                                    type: 'string',
                                    nullable: true
                                }
                            },
                            additionalProperties: false
                        }
                    },
                    nullable: true
                },
                languageFilesMap: {
                    type: 'object',
                    additionalProperties: {
                        type: 'array',
                        items: {
                            type: 'object',
                            properties: {
                                name: {
                                    type: 'string',
                                    nullable: true
                                },
                                value: {
                                    type: 'string',
                                    nullable: true
                                }
                            },
                            additionalProperties: false
                        }
                    },
                    nullable: true
                }
            },
            additionalProperties: false
        },
        auth: {
            type: 'object',
            properties: {
                grantedPolicies: {
                    type: 'object',
                    additionalProperties: {
                        type: 'boolean'
                    },
                    nullable: true
                }
            },
            additionalProperties: false
        },
        setting: {
            type: 'object',
            properties: {
                values: {
                    type: 'object',
                    additionalProperties: {
                        type: 'string',
                        nullable: true
                    },
                    nullable: true
                }
            },
            additionalProperties: false
        },
        currentUser: {
            type: 'object',
            properties: {
                isAuthenticated: {
                    type: 'boolean'
                },
                id: {
                    type: 'string',
                    format: 'uuid',
                    nullable: true
                },
                tenantId: {
                    type: 'string',
                    format: 'uuid',
                    nullable: true
                },
                impersonatorUserId: {
                    type: 'string',
                    format: 'uuid',
                    nullable: true
                },
                impersonatorTenantId: {
                    type: 'string',
                    format: 'uuid',
                    nullable: true
                },
                impersonatorUserName: {
                    type: 'string',
                    nullable: true
                },
                impersonatorTenantName: {
                    type: 'string',
                    nullable: true
                },
                userName: {
                    type: 'string',
                    nullable: true
                },
                name: {
                    type: 'string',
                    nullable: true
                },
                surName: {
                    type: 'string',
                    nullable: true
                },
                email: {
                    type: 'string',
                    nullable: true
                },
                emailVerified: {
                    type: 'boolean'
                },
                phoneNumber: {
                    type: 'string',
                    nullable: true
                },
                phoneNumberVerified: {
                    type: 'boolean'
                },
                roles: {
                    type: 'array',
                    items: {
                        type: 'string'
                    },
                    nullable: true
                },
                sessionId: {
                    type: 'string',
                    nullable: true
                }
            },
            additionalProperties: false
        },
        features: {
            type: 'object',
            properties: {
                values: {
                    type: 'object',
                    additionalProperties: {
                        type: 'string',
                        nullable: true
                    },
                    nullable: true
                }
            },
            additionalProperties: false
        },
        globalFeatures: {
            type: 'object',
            properties: {
                enabledFeatures: {
                    uniqueItems: true,
                    type: 'array',
                    items: {
                        type: 'string'
                    },
                    nullable: true
                }
            },
            additionalProperties: false
        },
        multiTenancy: {
            type: 'object',
            properties: {
                isEnabled: {
                    type: 'boolean'
                }
            },
            additionalProperties: false
        },
        currentTenant: {
            type: 'object',
            properties: {
                id: {
                    type: 'string',
                    format: 'uuid',
                    nullable: true
                },
                name: {
                    type: 'string',
                    nullable: true
                },
                isAvailable: {
                    type: 'boolean'
                }
            },
            additionalProperties: false
        },
        timing: {
            type: 'object',
            properties: {
                timeZone: {
                    type: 'object',
                    properties: {
                        iana: {
                            type: 'object',
                            properties: {
                                timeZoneName: {
                                    type: 'string',
                                    nullable: true
                                }
                            },
                            additionalProperties: false
                        },
                        windows: {
                            type: 'object',
                            properties: {
                                timeZoneId: {
                                    type: 'string',
                                    nullable: true
                                }
                            },
                            additionalProperties: false
                        }
                    },
                    additionalProperties: false
                }
            },
            additionalProperties: false
        },
        clock: {
            type: 'object',
            properties: {
                kind: {
                    type: 'string',
                    nullable: true
                }
            },
            additionalProperties: false
        },
        objectExtensions: {
            type: 'object',
            properties: {
                modules: {
                    type: 'object',
                    additionalProperties: {
                        type: 'object',
                        properties: {
                            entities: {
                                type: 'object',
                                additionalProperties: {
                                    type: 'object',
                                    properties: {
                                        properties: {
                                            type: 'object',
                                            additionalProperties: {
                                                type: 'object',
                                                properties: {
                                                    type: {
                                                        type: 'string',
                                                        nullable: true
                                                    },
                                                    typeSimple: {
                                                        type: 'string',
                                                        nullable: true
                                                    },
                                                    displayName: {
                                                        type: 'object',
                                                        properties: {
                                                            name: {
                                                                type: 'string',
                                                                nullable: true
                                                            },
                                                            resource: {
                                                                type: 'string',
                                                                nullable: true
                                                            }
                                                        },
                                                        additionalProperties: false
                                                    },
                                                    api: {
                                                        type: 'object',
                                                        properties: {
                                                            onGet: {
                                                                type: 'object',
                                                                properties: {
                                                                    isAvailable: {
                                                                        type: 'boolean'
                                                                    }
                                                                },
                                                                additionalProperties: false
                                                            },
                                                            onCreate: {
                                                                type: 'object',
                                                                properties: {
                                                                    isAvailable: {
                                                                        type: 'boolean'
                                                                    }
                                                                },
                                                                additionalProperties: false
                                                            },
                                                            onUpdate: {
                                                                type: 'object',
                                                                properties: {
                                                                    isAvailable: {
                                                                        type: 'boolean'
                                                                    }
                                                                },
                                                                additionalProperties: false
                                                            }
                                                        },
                                                        additionalProperties: false
                                                    },
                                                    ui: {
                                                        type: 'object',
                                                        properties: {
                                                            onTable: {
                                                                type: 'object',
                                                                properties: {
                                                                    isVisible: {
                                                                        type: 'boolean'
                                                                    }
                                                                },
                                                                additionalProperties: false
                                                            },
                                                            onCreateForm: {
                                                                type: 'object',
                                                                properties: {
                                                                    isVisible: {
                                                                        type: 'boolean'
                                                                    }
                                                                },
                                                                additionalProperties: false
                                                            },
                                                            onEditForm: {
                                                                type: 'object',
                                                                properties: {
                                                                    isVisible: {
                                                                        type: 'boolean'
                                                                    }
                                                                },
                                                                additionalProperties: false
                                                            },
                                                            lookup: {
                                                                type: 'object',
                                                                properties: {
                                                                    url: {
                                                                        type: 'string',
                                                                        nullable: true
                                                                    },
                                                                    resultListPropertyName: {
                                                                        type: 'string',
                                                                        nullable: true
                                                                    },
                                                                    displayPropertyName: {
                                                                        type: 'string',
                                                                        nullable: true
                                                                    },
                                                                    valuePropertyName: {
                                                                        type: 'string',
                                                                        nullable: true
                                                                    },
                                                                    filterParamName: {
                                                                        type: 'string',
                                                                        nullable: true
                                                                    }
                                                                },
                                                                additionalProperties: false
                                                            }
                                                        },
                                                        additionalProperties: false
                                                    },
                                                    policy: {
                                                        type: 'object',
                                                        properties: {
                                                            globalFeatures: {
                                                                type: 'object',
                                                                properties: {
                                                                    features: {
                                                                        type: 'array',
                                                                        items: {
                                                                            type: 'string'
                                                                        },
                                                                        nullable: true
                                                                    },
                                                                    requiresAll: {
                                                                        type: 'boolean'
                                                                    }
                                                                },
                                                                additionalProperties: false
                                                            },
                                                            features: {
                                                                type: 'object',
                                                                properties: {
                                                                    features: {
                                                                        type: 'array',
                                                                        items: {
                                                                            type: 'string'
                                                                        },
                                                                        nullable: true
                                                                    },
                                                                    requiresAll: {
                                                                        type: 'boolean'
                                                                    }
                                                                },
                                                                additionalProperties: false
                                                            },
                                                            permissions: {
                                                                type: 'object',
                                                                properties: {
                                                                    permissionNames: {
                                                                        type: 'array',
                                                                        items: {
                                                                            type: 'string'
                                                                        },
                                                                        nullable: true
                                                                    },
                                                                    requiresAll: {
                                                                        type: 'boolean'
                                                                    }
                                                                },
                                                                additionalProperties: false
                                                            }
                                                        },
                                                        additionalProperties: false
                                                    },
                                                    attributes: {
                                                        type: 'array',
                                                        items: {
                                                            type: 'object',
                                                            properties: {
                                                                typeSimple: {
                                                                    type: 'string',
                                                                    nullable: true
                                                                },
                                                                config: {
                                                                    type: 'object',
                                                                    additionalProperties: {},
                                                                    nullable: true
                                                                }
                                                            },
                                                            additionalProperties: false
                                                        },
                                                        nullable: true
                                                    },
                                                    configuration: {
                                                        type: 'object',
                                                        additionalProperties: {},
                                                        nullable: true
                                                    },
                                                    defaultValue: {
                                                        nullable: true
                                                    }
                                                },
                                                additionalProperties: false
                                            },
                                            nullable: true
                                        },
                                        configuration: {
                                            type: 'object',
                                            additionalProperties: {},
                                            nullable: true
                                        }
                                    },
                                    additionalProperties: false
                                },
                                nullable: true
                            },
                            configuration: {
                                type: 'object',
                                additionalProperties: {},
                                nullable: true
                            }
                        },
                        additionalProperties: false
                    },
                    nullable: true
                },
                enums: {
                    type: 'object',
                    additionalProperties: {
                        type: 'object',
                        properties: {
                            fields: {
                                type: 'array',
                                items: {
                                    type: 'object',
                                    properties: {
                                        name: {
                                            type: 'string',
                                            nullable: true
                                        },
                                        value: {
                                            nullable: true
                                        }
                                    },
                                    additionalProperties: false
                                },
                                nullable: true
                            },
                            localizationResource: {
                                type: 'string',
                                nullable: true
                            }
                        },
                        additionalProperties: false
                    },
                    nullable: true
                }
            },
            additionalProperties: false
        },
        extraProperties: {
            type: 'object',
            additionalProperties: {},
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ApplicationFeatureConfigurationDto = {
    type: 'object',
    properties: {
        values: {
            type: 'object',
            additionalProperties: {
                type: 'string',
                nullable: true
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ApplicationGlobalFeatureConfigurationDto = {
    type: 'object',
    properties: {
        enabledFeatures: {
            uniqueItems: true,
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ApplicationLocalizationConfigurationDto = {
    type: 'object',
    properties: {
        values: {
            type: 'object',
            additionalProperties: {
                type: 'object',
                additionalProperties: {
                    type: 'string'
                }
            },
            nullable: true
        },
        resources: {
            type: 'object',
            additionalProperties: {
                type: 'object',
                properties: {
                    texts: {
                        type: 'object',
                        additionalProperties: {
                            type: 'string'
                        },
                        nullable: true
                    },
                    baseResources: {
                        type: 'array',
                        items: {
                            type: 'string'
                        },
                        nullable: true
                    }
                },
                additionalProperties: false
            },
            nullable: true
        },
        languages: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    cultureName: {
                        type: 'string',
                        nullable: true
                    },
                    uiCultureName: {
                        type: 'string',
                        nullable: true
                    },
                    displayName: {
                        type: 'string',
                        nullable: true
                    },
                    twoLetterISOLanguageName: {
                        type: 'string',
                        nullable: true,
                        readOnly: true
                    }
                },
                additionalProperties: false
            },
            nullable: true
        },
        currentCulture: {
            type: 'object',
            properties: {
                displayName: {
                    type: 'string',
                    nullable: true
                },
                englishName: {
                    type: 'string',
                    nullable: true
                },
                threeLetterIsoLanguageName: {
                    type: 'string',
                    nullable: true
                },
                twoLetterIsoLanguageName: {
                    type: 'string',
                    nullable: true
                },
                isRightToLeft: {
                    type: 'boolean'
                },
                cultureName: {
                    type: 'string',
                    nullable: true
                },
                name: {
                    type: 'string',
                    nullable: true
                },
                nativeName: {
                    type: 'string',
                    nullable: true
                },
                dateTimeFormat: {
                    type: 'object',
                    properties: {
                        calendarAlgorithmType: {
                            type: 'string',
                            nullable: true
                        },
                        dateTimeFormatLong: {
                            type: 'string',
                            nullable: true
                        },
                        shortDatePattern: {
                            type: 'string',
                            nullable: true
                        },
                        fullDateTimePattern: {
                            type: 'string',
                            nullable: true
                        },
                        dateSeparator: {
                            type: 'string',
                            nullable: true
                        },
                        shortTimePattern: {
                            type: 'string',
                            nullable: true
                        },
                        longTimePattern: {
                            type: 'string',
                            nullable: true
                        }
                    },
                    additionalProperties: false
                }
            },
            additionalProperties: false
        },
        defaultResourceName: {
            type: 'string',
            nullable: true
        },
        languagesMap: {
            type: 'object',
            additionalProperties: {
                type: 'array',
                items: {
                    type: 'object',
                    properties: {
                        name: {
                            type: 'string',
                            nullable: true
                        },
                        value: {
                            type: 'string',
                            nullable: true
                        }
                    },
                    additionalProperties: false
                }
            },
            nullable: true
        },
        languageFilesMap: {
            type: 'object',
            additionalProperties: {
                type: 'array',
                items: {
                    type: 'object',
                    properties: {
                        name: {
                            type: 'string',
                            nullable: true
                        },
                        value: {
                            type: 'string',
                            nullable: true
                        }
                    },
                    additionalProperties: false
                }
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ApplicationLocalizationDto = {
    type: 'object',
    properties: {
        resources: {
            type: 'object',
            additionalProperties: {
                type: 'object',
                properties: {
                    texts: {
                        type: 'object',
                        additionalProperties: {
                            type: 'string'
                        },
                        nullable: true
                    },
                    baseResources: {
                        type: 'array',
                        items: {
                            type: 'string'
                        },
                        nullable: true
                    }
                },
                additionalProperties: false
            },
            nullable: true
        },
        currentCulture: {
            type: 'object',
            properties: {
                displayName: {
                    type: 'string',
                    nullable: true
                },
                englishName: {
                    type: 'string',
                    nullable: true
                },
                threeLetterIsoLanguageName: {
                    type: 'string',
                    nullable: true
                },
                twoLetterIsoLanguageName: {
                    type: 'string',
                    nullable: true
                },
                isRightToLeft: {
                    type: 'boolean'
                },
                cultureName: {
                    type: 'string',
                    nullable: true
                },
                name: {
                    type: 'string',
                    nullable: true
                },
                nativeName: {
                    type: 'string',
                    nullable: true
                },
                dateTimeFormat: {
                    type: 'object',
                    properties: {
                        calendarAlgorithmType: {
                            type: 'string',
                            nullable: true
                        },
                        dateTimeFormatLong: {
                            type: 'string',
                            nullable: true
                        },
                        shortDatePattern: {
                            type: 'string',
                            nullable: true
                        },
                        fullDateTimePattern: {
                            type: 'string',
                            nullable: true
                        },
                        dateSeparator: {
                            type: 'string',
                            nullable: true
                        },
                        shortTimePattern: {
                            type: 'string',
                            nullable: true
                        },
                        longTimePattern: {
                            type: 'string',
                            nullable: true
                        }
                    },
                    additionalProperties: false
                }
            },
            additionalProperties: false
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ApplicationLocalizationResourceDto = {
    type: 'object',
    properties: {
        texts: {
            type: 'object',
            additionalProperties: {
                type: 'string'
            },
            nullable: true
        },
        baseResources: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ApplicationSettingConfigurationDto = {
    type: 'object',
    properties: {
        values: {
            type: 'object',
            additionalProperties: {
                type: 'string',
                nullable: true
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ClockDto = {
    type: 'object',
    properties: {
        kind: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_CurrentCultureDto = {
    type: 'object',
    properties: {
        displayName: {
            type: 'string',
            nullable: true
        },
        englishName: {
            type: 'string',
            nullable: true
        },
        threeLetterIsoLanguageName: {
            type: 'string',
            nullable: true
        },
        twoLetterIsoLanguageName: {
            type: 'string',
            nullable: true
        },
        isRightToLeft: {
            type: 'boolean'
        },
        cultureName: {
            type: 'string',
            nullable: true
        },
        name: {
            type: 'string',
            nullable: true
        },
        nativeName: {
            type: 'string',
            nullable: true
        },
        dateTimeFormat: {
            type: 'object',
            properties: {
                calendarAlgorithmType: {
                    type: 'string',
                    nullable: true
                },
                dateTimeFormatLong: {
                    type: 'string',
                    nullable: true
                },
                shortDatePattern: {
                    type: 'string',
                    nullable: true
                },
                fullDateTimePattern: {
                    type: 'string',
                    nullable: true
                },
                dateSeparator: {
                    type: 'string',
                    nullable: true
                },
                shortTimePattern: {
                    type: 'string',
                    nullable: true
                },
                longTimePattern: {
                    type: 'string',
                    nullable: true
                }
            },
            additionalProperties: false
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_CurrentUserDto = {
    type: 'object',
    properties: {
        isAuthenticated: {
            type: 'boolean'
        },
        id: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        tenantId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        impersonatorUserId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        impersonatorTenantId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        impersonatorUserName: {
            type: 'string',
            nullable: true
        },
        impersonatorTenantName: {
            type: 'string',
            nullable: true
        },
        userName: {
            type: 'string',
            nullable: true
        },
        name: {
            type: 'string',
            nullable: true
        },
        surName: {
            type: 'string',
            nullable: true
        },
        email: {
            type: 'string',
            nullable: true
        },
        emailVerified: {
            type: 'boolean'
        },
        phoneNumber: {
            type: 'string',
            nullable: true
        },
        phoneNumberVerified: {
            type: 'boolean'
        },
        roles: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        },
        sessionId: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_DateTimeFormatDto = {
    type: 'object',
    properties: {
        calendarAlgorithmType: {
            type: 'string',
            nullable: true
        },
        dateTimeFormatLong: {
            type: 'string',
            nullable: true
        },
        shortDatePattern: {
            type: 'string',
            nullable: true
        },
        fullDateTimePattern: {
            type: 'string',
            nullable: true
        },
        dateSeparator: {
            type: 'string',
            nullable: true
        },
        shortTimePattern: {
            type: 'string',
            nullable: true
        },
        longTimePattern: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_IanaTimeZone = {
    type: 'object',
    properties: {
        timeZoneName: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ObjectExtending_EntityExtensionDto = {
    type: 'object',
    properties: {
        properties: {
            type: 'object',
            additionalProperties: {
                type: 'object',
                properties: {
                    type: {
                        type: 'string',
                        nullable: true
                    },
                    typeSimple: {
                        type: 'string',
                        nullable: true
                    },
                    displayName: {
                        type: 'object',
                        properties: {
                            name: {
                                type: 'string',
                                nullable: true
                            },
                            resource: {
                                type: 'string',
                                nullable: true
                            }
                        },
                        additionalProperties: false
                    },
                    api: {
                        type: 'object',
                        properties: {
                            onGet: {
                                type: 'object',
                                properties: {
                                    isAvailable: {
                                        type: 'boolean'
                                    }
                                },
                                additionalProperties: false
                            },
                            onCreate: {
                                type: 'object',
                                properties: {
                                    isAvailable: {
                                        type: 'boolean'
                                    }
                                },
                                additionalProperties: false
                            },
                            onUpdate: {
                                type: 'object',
                                properties: {
                                    isAvailable: {
                                        type: 'boolean'
                                    }
                                },
                                additionalProperties: false
                            }
                        },
                        additionalProperties: false
                    },
                    ui: {
                        type: 'object',
                        properties: {
                            onTable: {
                                type: 'object',
                                properties: {
                                    isVisible: {
                                        type: 'boolean'
                                    }
                                },
                                additionalProperties: false
                            },
                            onCreateForm: {
                                type: 'object',
                                properties: {
                                    isVisible: {
                                        type: 'boolean'
                                    }
                                },
                                additionalProperties: false
                            },
                            onEditForm: {
                                type: 'object',
                                properties: {
                                    isVisible: {
                                        type: 'boolean'
                                    }
                                },
                                additionalProperties: false
                            },
                            lookup: {
                                type: 'object',
                                properties: {
                                    url: {
                                        type: 'string',
                                        nullable: true
                                    },
                                    resultListPropertyName: {
                                        type: 'string',
                                        nullable: true
                                    },
                                    displayPropertyName: {
                                        type: 'string',
                                        nullable: true
                                    },
                                    valuePropertyName: {
                                        type: 'string',
                                        nullable: true
                                    },
                                    filterParamName: {
                                        type: 'string',
                                        nullable: true
                                    }
                                },
                                additionalProperties: false
                            }
                        },
                        additionalProperties: false
                    },
                    policy: {
                        type: 'object',
                        properties: {
                            globalFeatures: {
                                type: 'object',
                                properties: {
                                    features: {
                                        type: 'array',
                                        items: {
                                            type: 'string'
                                        },
                                        nullable: true
                                    },
                                    requiresAll: {
                                        type: 'boolean'
                                    }
                                },
                                additionalProperties: false
                            },
                            features: {
                                type: 'object',
                                properties: {
                                    features: {
                                        type: 'array',
                                        items: {
                                            type: 'string'
                                        },
                                        nullable: true
                                    },
                                    requiresAll: {
                                        type: 'boolean'
                                    }
                                },
                                additionalProperties: false
                            },
                            permissions: {
                                type: 'object',
                                properties: {
                                    permissionNames: {
                                        type: 'array',
                                        items: {
                                            type: 'string'
                                        },
                                        nullable: true
                                    },
                                    requiresAll: {
                                        type: 'boolean'
                                    }
                                },
                                additionalProperties: false
                            }
                        },
                        additionalProperties: false
                    },
                    attributes: {
                        type: 'array',
                        items: {
                            type: 'object',
                            properties: {
                                typeSimple: {
                                    type: 'string',
                                    nullable: true
                                },
                                config: {
                                    type: 'object',
                                    additionalProperties: {},
                                    nullable: true
                                }
                            },
                            additionalProperties: false
                        },
                        nullable: true
                    },
                    configuration: {
                        type: 'object',
                        additionalProperties: {},
                        nullable: true
                    },
                    defaultValue: {
                        nullable: true
                    }
                },
                additionalProperties: false
            },
            nullable: true
        },
        configuration: {
            type: 'object',
            additionalProperties: {},
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ObjectExtending_ExtensionEnumDto = {
    type: 'object',
    properties: {
        fields: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    name: {
                        type: 'string',
                        nullable: true
                    },
                    value: {
                        nullable: true
                    }
                },
                additionalProperties: false
            },
            nullable: true
        },
        localizationResource: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ObjectExtending_ExtensionEnumFieldDto = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            nullable: true
        },
        value: {
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ObjectExtending_ExtensionPropertyApiCreateDto = {
    type: 'object',
    properties: {
        isAvailable: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ObjectExtending_ExtensionPropertyApiDto = {
    type: 'object',
    properties: {
        onGet: {
            type: 'object',
            properties: {
                isAvailable: {
                    type: 'boolean'
                }
            },
            additionalProperties: false
        },
        onCreate: {
            type: 'object',
            properties: {
                isAvailable: {
                    type: 'boolean'
                }
            },
            additionalProperties: false
        },
        onUpdate: {
            type: 'object',
            properties: {
                isAvailable: {
                    type: 'boolean'
                }
            },
            additionalProperties: false
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ObjectExtending_ExtensionPropertyApiGetDto = {
    type: 'object',
    properties: {
        isAvailable: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ObjectExtending_ExtensionPropertyApiUpdateDto = {
    type: 'object',
    properties: {
        isAvailable: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ObjectExtending_ExtensionPropertyAttributeDto = {
    type: 'object',
    properties: {
        typeSimple: {
            type: 'string',
            nullable: true
        },
        config: {
            type: 'object',
            additionalProperties: {},
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ObjectExtending_ExtensionPropertyDto = {
    type: 'object',
    properties: {
        type: {
            type: 'string',
            nullable: true
        },
        typeSimple: {
            type: 'string',
            nullable: true
        },
        displayName: {
            type: 'object',
            properties: {
                name: {
                    type: 'string',
                    nullable: true
                },
                resource: {
                    type: 'string',
                    nullable: true
                }
            },
            additionalProperties: false
        },
        api: {
            type: 'object',
            properties: {
                onGet: {
                    type: 'object',
                    properties: {
                        isAvailable: {
                            type: 'boolean'
                        }
                    },
                    additionalProperties: false
                },
                onCreate: {
                    type: 'object',
                    properties: {
                        isAvailable: {
                            type: 'boolean'
                        }
                    },
                    additionalProperties: false
                },
                onUpdate: {
                    type: 'object',
                    properties: {
                        isAvailable: {
                            type: 'boolean'
                        }
                    },
                    additionalProperties: false
                }
            },
            additionalProperties: false
        },
        ui: {
            type: 'object',
            properties: {
                onTable: {
                    type: 'object',
                    properties: {
                        isVisible: {
                            type: 'boolean'
                        }
                    },
                    additionalProperties: false
                },
                onCreateForm: {
                    type: 'object',
                    properties: {
                        isVisible: {
                            type: 'boolean'
                        }
                    },
                    additionalProperties: false
                },
                onEditForm: {
                    type: 'object',
                    properties: {
                        isVisible: {
                            type: 'boolean'
                        }
                    },
                    additionalProperties: false
                },
                lookup: {
                    type: 'object',
                    properties: {
                        url: {
                            type: 'string',
                            nullable: true
                        },
                        resultListPropertyName: {
                            type: 'string',
                            nullable: true
                        },
                        displayPropertyName: {
                            type: 'string',
                            nullable: true
                        },
                        valuePropertyName: {
                            type: 'string',
                            nullable: true
                        },
                        filterParamName: {
                            type: 'string',
                            nullable: true
                        }
                    },
                    additionalProperties: false
                }
            },
            additionalProperties: false
        },
        policy: {
            type: 'object',
            properties: {
                globalFeatures: {
                    type: 'object',
                    properties: {
                        features: {
                            type: 'array',
                            items: {
                                type: 'string'
                            },
                            nullable: true
                        },
                        requiresAll: {
                            type: 'boolean'
                        }
                    },
                    additionalProperties: false
                },
                features: {
                    type: 'object',
                    properties: {
                        features: {
                            type: 'array',
                            items: {
                                type: 'string'
                            },
                            nullable: true
                        },
                        requiresAll: {
                            type: 'boolean'
                        }
                    },
                    additionalProperties: false
                },
                permissions: {
                    type: 'object',
                    properties: {
                        permissionNames: {
                            type: 'array',
                            items: {
                                type: 'string'
                            },
                            nullable: true
                        },
                        requiresAll: {
                            type: 'boolean'
                        }
                    },
                    additionalProperties: false
                }
            },
            additionalProperties: false
        },
        attributes: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    typeSimple: {
                        type: 'string',
                        nullable: true
                    },
                    config: {
                        type: 'object',
                        additionalProperties: {},
                        nullable: true
                    }
                },
                additionalProperties: false
            },
            nullable: true
        },
        configuration: {
            type: 'object',
            additionalProperties: {},
            nullable: true
        },
        defaultValue: {
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ObjectExtending_ExtensionPropertyFeaturePolicyDto = {
    type: 'object',
    properties: {
        features: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        },
        requiresAll: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ObjectExtending_ExtensionPropertyGlobalFeaturePolicyDto = {
    type: 'object',
    properties: {
        features: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        },
        requiresAll: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ObjectExtending_ExtensionPropertyPermissionPolicyDto = {
    type: 'object',
    properties: {
        permissionNames: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        },
        requiresAll: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ObjectExtending_ExtensionPropertyPolicyDto = {
    type: 'object',
    properties: {
        globalFeatures: {
            type: 'object',
            properties: {
                features: {
                    type: 'array',
                    items: {
                        type: 'string'
                    },
                    nullable: true
                },
                requiresAll: {
                    type: 'boolean'
                }
            },
            additionalProperties: false
        },
        features: {
            type: 'object',
            properties: {
                features: {
                    type: 'array',
                    items: {
                        type: 'string'
                    },
                    nullable: true
                },
                requiresAll: {
                    type: 'boolean'
                }
            },
            additionalProperties: false
        },
        permissions: {
            type: 'object',
            properties: {
                permissionNames: {
                    type: 'array',
                    items: {
                        type: 'string'
                    },
                    nullable: true
                },
                requiresAll: {
                    type: 'boolean'
                }
            },
            additionalProperties: false
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ObjectExtending_ExtensionPropertyUiDto = {
    type: 'object',
    properties: {
        onTable: {
            type: 'object',
            properties: {
                isVisible: {
                    type: 'boolean'
                }
            },
            additionalProperties: false
        },
        onCreateForm: {
            type: 'object',
            properties: {
                isVisible: {
                    type: 'boolean'
                }
            },
            additionalProperties: false
        },
        onEditForm: {
            type: 'object',
            properties: {
                isVisible: {
                    type: 'boolean'
                }
            },
            additionalProperties: false
        },
        lookup: {
            type: 'object',
            properties: {
                url: {
                    type: 'string',
                    nullable: true
                },
                resultListPropertyName: {
                    type: 'string',
                    nullable: true
                },
                displayPropertyName: {
                    type: 'string',
                    nullable: true
                },
                valuePropertyName: {
                    type: 'string',
                    nullable: true
                },
                filterParamName: {
                    type: 'string',
                    nullable: true
                }
            },
            additionalProperties: false
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ObjectExtending_ExtensionPropertyUiFormDto = {
    type: 'object',
    properties: {
        isVisible: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ObjectExtending_ExtensionPropertyUiLookupDto = {
    type: 'object',
    properties: {
        url: {
            type: 'string',
            nullable: true
        },
        resultListPropertyName: {
            type: 'string',
            nullable: true
        },
        displayPropertyName: {
            type: 'string',
            nullable: true
        },
        valuePropertyName: {
            type: 'string',
            nullable: true
        },
        filterParamName: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ObjectExtending_ExtensionPropertyUiTableDto = {
    type: 'object',
    properties: {
        isVisible: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ObjectExtending_LocalizableStringDto = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            nullable: true
        },
        resource: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ObjectExtending_ModuleExtensionDto = {
    type: 'object',
    properties: {
        entities: {
            type: 'object',
            additionalProperties: {
                type: 'object',
                properties: {
                    properties: {
                        type: 'object',
                        additionalProperties: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    nullable: true
                                },
                                typeSimple: {
                                    type: 'string',
                                    nullable: true
                                },
                                displayName: {
                                    type: 'object',
                                    properties: {
                                        name: {
                                            type: 'string',
                                            nullable: true
                                        },
                                        resource: {
                                            type: 'string',
                                            nullable: true
                                        }
                                    },
                                    additionalProperties: false
                                },
                                api: {
                                    type: 'object',
                                    properties: {
                                        onGet: {
                                            type: 'object',
                                            properties: {
                                                isAvailable: {
                                                    type: 'boolean'
                                                }
                                            },
                                            additionalProperties: false
                                        },
                                        onCreate: {
                                            type: 'object',
                                            properties: {
                                                isAvailable: {
                                                    type: 'boolean'
                                                }
                                            },
                                            additionalProperties: false
                                        },
                                        onUpdate: {
                                            type: 'object',
                                            properties: {
                                                isAvailable: {
                                                    type: 'boolean'
                                                }
                                            },
                                            additionalProperties: false
                                        }
                                    },
                                    additionalProperties: false
                                },
                                ui: {
                                    type: 'object',
                                    properties: {
                                        onTable: {
                                            type: 'object',
                                            properties: {
                                                isVisible: {
                                                    type: 'boolean'
                                                }
                                            },
                                            additionalProperties: false
                                        },
                                        onCreateForm: {
                                            type: 'object',
                                            properties: {
                                                isVisible: {
                                                    type: 'boolean'
                                                }
                                            },
                                            additionalProperties: false
                                        },
                                        onEditForm: {
                                            type: 'object',
                                            properties: {
                                                isVisible: {
                                                    type: 'boolean'
                                                }
                                            },
                                            additionalProperties: false
                                        },
                                        lookup: {
                                            type: 'object',
                                            properties: {
                                                url: {
                                                    type: 'string',
                                                    nullable: true
                                                },
                                                resultListPropertyName: {
                                                    type: 'string',
                                                    nullable: true
                                                },
                                                displayPropertyName: {
                                                    type: 'string',
                                                    nullable: true
                                                },
                                                valuePropertyName: {
                                                    type: 'string',
                                                    nullable: true
                                                },
                                                filterParamName: {
                                                    type: 'string',
                                                    nullable: true
                                                }
                                            },
                                            additionalProperties: false
                                        }
                                    },
                                    additionalProperties: false
                                },
                                policy: {
                                    type: 'object',
                                    properties: {
                                        globalFeatures: {
                                            type: 'object',
                                            properties: {
                                                features: {
                                                    type: 'array',
                                                    items: {
                                                        type: 'string'
                                                    },
                                                    nullable: true
                                                },
                                                requiresAll: {
                                                    type: 'boolean'
                                                }
                                            },
                                            additionalProperties: false
                                        },
                                        features: {
                                            type: 'object',
                                            properties: {
                                                features: {
                                                    type: 'array',
                                                    items: {
                                                        type: 'string'
                                                    },
                                                    nullable: true
                                                },
                                                requiresAll: {
                                                    type: 'boolean'
                                                }
                                            },
                                            additionalProperties: false
                                        },
                                        permissions: {
                                            type: 'object',
                                            properties: {
                                                permissionNames: {
                                                    type: 'array',
                                                    items: {
                                                        type: 'string'
                                                    },
                                                    nullable: true
                                                },
                                                requiresAll: {
                                                    type: 'boolean'
                                                }
                                            },
                                            additionalProperties: false
                                        }
                                    },
                                    additionalProperties: false
                                },
                                attributes: {
                                    type: 'array',
                                    items: {
                                        type: 'object',
                                        properties: {
                                            typeSimple: {
                                                type: 'string',
                                                nullable: true
                                            },
                                            config: {
                                                type: 'object',
                                                additionalProperties: {},
                                                nullable: true
                                            }
                                        },
                                        additionalProperties: false
                                    },
                                    nullable: true
                                },
                                configuration: {
                                    type: 'object',
                                    additionalProperties: {},
                                    nullable: true
                                },
                                defaultValue: {
                                    nullable: true
                                }
                            },
                            additionalProperties: false
                        },
                        nullable: true
                    },
                    configuration: {
                        type: 'object',
                        additionalProperties: {},
                        nullable: true
                    }
                },
                additionalProperties: false
            },
            nullable: true
        },
        configuration: {
            type: 'object',
            additionalProperties: {},
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ObjectExtending_ObjectExtensionsDto = {
    type: 'object',
    properties: {
        modules: {
            type: 'object',
            additionalProperties: {
                type: 'object',
                properties: {
                    entities: {
                        type: 'object',
                        additionalProperties: {
                            type: 'object',
                            properties: {
                                properties: {
                                    type: 'object',
                                    additionalProperties: {
                                        type: 'object',
                                        properties: {
                                            type: {
                                                type: 'string',
                                                nullable: true
                                            },
                                            typeSimple: {
                                                type: 'string',
                                                nullable: true
                                            },
                                            displayName: {
                                                type: 'object',
                                                properties: {
                                                    name: {
                                                        type: 'string',
                                                        nullable: true
                                                    },
                                                    resource: {
                                                        type: 'string',
                                                        nullable: true
                                                    }
                                                },
                                                additionalProperties: false
                                            },
                                            api: {
                                                type: 'object',
                                                properties: {
                                                    onGet: {
                                                        type: 'object',
                                                        properties: {
                                                            isAvailable: {
                                                                type: 'boolean'
                                                            }
                                                        },
                                                        additionalProperties: false
                                                    },
                                                    onCreate: {
                                                        type: 'object',
                                                        properties: {
                                                            isAvailable: {
                                                                type: 'boolean'
                                                            }
                                                        },
                                                        additionalProperties: false
                                                    },
                                                    onUpdate: {
                                                        type: 'object',
                                                        properties: {
                                                            isAvailable: {
                                                                type: 'boolean'
                                                            }
                                                        },
                                                        additionalProperties: false
                                                    }
                                                },
                                                additionalProperties: false
                                            },
                                            ui: {
                                                type: 'object',
                                                properties: {
                                                    onTable: {
                                                        type: 'object',
                                                        properties: {
                                                            isVisible: {
                                                                type: 'boolean'
                                                            }
                                                        },
                                                        additionalProperties: false
                                                    },
                                                    onCreateForm: {
                                                        type: 'object',
                                                        properties: {
                                                            isVisible: {
                                                                type: 'boolean'
                                                            }
                                                        },
                                                        additionalProperties: false
                                                    },
                                                    onEditForm: {
                                                        type: 'object',
                                                        properties: {
                                                            isVisible: {
                                                                type: 'boolean'
                                                            }
                                                        },
                                                        additionalProperties: false
                                                    },
                                                    lookup: {
                                                        type: 'object',
                                                        properties: {
                                                            url: {
                                                                type: 'string',
                                                                nullable: true
                                                            },
                                                            resultListPropertyName: {
                                                                type: 'string',
                                                                nullable: true
                                                            },
                                                            displayPropertyName: {
                                                                type: 'string',
                                                                nullable: true
                                                            },
                                                            valuePropertyName: {
                                                                type: 'string',
                                                                nullable: true
                                                            },
                                                            filterParamName: {
                                                                type: 'string',
                                                                nullable: true
                                                            }
                                                        },
                                                        additionalProperties: false
                                                    }
                                                },
                                                additionalProperties: false
                                            },
                                            policy: {
                                                type: 'object',
                                                properties: {
                                                    globalFeatures: {
                                                        type: 'object',
                                                        properties: {
                                                            features: {
                                                                type: 'array',
                                                                items: {
                                                                    type: 'string'
                                                                },
                                                                nullable: true
                                                            },
                                                            requiresAll: {
                                                                type: 'boolean'
                                                            }
                                                        },
                                                        additionalProperties: false
                                                    },
                                                    features: {
                                                        type: 'object',
                                                        properties: {
                                                            features: {
                                                                type: 'array',
                                                                items: {
                                                                    type: 'string'
                                                                },
                                                                nullable: true
                                                            },
                                                            requiresAll: {
                                                                type: 'boolean'
                                                            }
                                                        },
                                                        additionalProperties: false
                                                    },
                                                    permissions: {
                                                        type: 'object',
                                                        properties: {
                                                            permissionNames: {
                                                                type: 'array',
                                                                items: {
                                                                    type: 'string'
                                                                },
                                                                nullable: true
                                                            },
                                                            requiresAll: {
                                                                type: 'boolean'
                                                            }
                                                        },
                                                        additionalProperties: false
                                                    }
                                                },
                                                additionalProperties: false
                                            },
                                            attributes: {
                                                type: 'array',
                                                items: {
                                                    type: 'object',
                                                    properties: {
                                                        typeSimple: {
                                                            type: 'string',
                                                            nullable: true
                                                        },
                                                        config: {
                                                            type: 'object',
                                                            additionalProperties: {},
                                                            nullable: true
                                                        }
                                                    },
                                                    additionalProperties: false
                                                },
                                                nullable: true
                                            },
                                            configuration: {
                                                type: 'object',
                                                additionalProperties: {},
                                                nullable: true
                                            },
                                            defaultValue: {
                                                nullable: true
                                            }
                                        },
                                        additionalProperties: false
                                    },
                                    nullable: true
                                },
                                configuration: {
                                    type: 'object',
                                    additionalProperties: {},
                                    nullable: true
                                }
                            },
                            additionalProperties: false
                        },
                        nullable: true
                    },
                    configuration: {
                        type: 'object',
                        additionalProperties: {},
                        nullable: true
                    }
                },
                additionalProperties: false
            },
            nullable: true
        },
        enums: {
            type: 'object',
            additionalProperties: {
                type: 'object',
                properties: {
                    fields: {
                        type: 'array',
                        items: {
                            type: 'object',
                            properties: {
                                name: {
                                    type: 'string',
                                    nullable: true
                                },
                                value: {
                                    nullable: true
                                }
                            },
                            additionalProperties: false
                        },
                        nullable: true
                    },
                    localizationResource: {
                        type: 'string',
                        nullable: true
                    }
                },
                additionalProperties: false
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_TimeZone = {
    type: 'object',
    properties: {
        iana: {
            type: 'object',
            properties: {
                timeZoneName: {
                    type: 'string',
                    nullable: true
                }
            },
            additionalProperties: false
        },
        windows: {
            type: 'object',
            properties: {
                timeZoneId: {
                    type: 'string',
                    nullable: true
                }
            },
            additionalProperties: false
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_TimingDto = {
    type: 'object',
    properties: {
        timeZone: {
            type: 'object',
            properties: {
                iana: {
                    type: 'object',
                    properties: {
                        timeZoneName: {
                            type: 'string',
                            nullable: true
                        }
                    },
                    additionalProperties: false
                },
                windows: {
                    type: 'object',
                    properties: {
                        timeZoneId: {
                            type: 'string',
                            nullable: true
                        }
                    },
                    additionalProperties: false
                }
            },
            additionalProperties: false
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_WindowsTimeZone = {
    type: 'object',
    properties: {
        timeZoneId: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_MultiTenancy_CurrentTenantDto = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        name: {
            type: 'string',
            nullable: true
        },
        isAvailable: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_MultiTenancy_FindTenantResultDto = {
    type: 'object',
    properties: {
        success: {
            type: 'boolean'
        },
        tenantId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        name: {
            type: 'string',
            nullable: true
        },
        normalizedName: {
            type: 'string',
            nullable: true
        },
        isActive: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_MultiTenancy_MultiTenancyInfoDto = {
    type: 'object',
    properties: {
        isEnabled: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_FeatureManagement_FeatureDto = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            nullable: true
        },
        displayName: {
            type: 'string',
            nullable: true
        },
        value: {
            type: 'string',
            nullable: true
        },
        provider: {
            type: 'object',
            properties: {
                name: {
                    type: 'string',
                    nullable: true
                },
                key: {
                    type: 'string',
                    nullable: true
                }
            },
            additionalProperties: false
        },
        description: {
            type: 'string',
            nullable: true
        },
        valueType: {
            type: 'object',
            properties: {
                name: {
                    type: 'string',
                    nullable: true,
                    readOnly: true
                },
                properties: {
                    type: 'object',
                    additionalProperties: {
                        nullable: true
                    },
                    nullable: true,
                    readOnly: true
                },
                validator: {
                    type: 'object',
                    properties: {
                        name: {
                            type: 'string',
                            nullable: true,
                            readOnly: true
                        },
                        properties: {
                            type: 'object',
                            additionalProperties: {
                                nullable: true
                            },
                            nullable: true,
                            readOnly: true
                        }
                    },
                    additionalProperties: false
                }
            },
            additionalProperties: false
        },
        depth: {
            type: 'integer',
            format: 'int32'
        },
        parentName: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_FeatureManagement_FeatureGroupDto = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            nullable: true
        },
        displayName: {
            type: 'string',
            nullable: true
        },
        features: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    name: {
                        type: 'string',
                        nullable: true
                    },
                    displayName: {
                        type: 'string',
                        nullable: true
                    },
                    value: {
                        type: 'string',
                        nullable: true
                    },
                    provider: {
                        type: 'object',
                        properties: {
                            name: {
                                type: 'string',
                                nullable: true
                            },
                            key: {
                                type: 'string',
                                nullable: true
                            }
                        },
                        additionalProperties: false
                    },
                    description: {
                        type: 'string',
                        nullable: true
                    },
                    valueType: {
                        type: 'object',
                        properties: {
                            name: {
                                type: 'string',
                                nullable: true,
                                readOnly: true
                            },
                            properties: {
                                type: 'object',
                                additionalProperties: {
                                    nullable: true
                                },
                                nullable: true,
                                readOnly: true
                            },
                            validator: {
                                type: 'object',
                                properties: {
                                    name: {
                                        type: 'string',
                                        nullable: true,
                                        readOnly: true
                                    },
                                    properties: {
                                        type: 'object',
                                        additionalProperties: {
                                            nullable: true
                                        },
                                        nullable: true,
                                        readOnly: true
                                    }
                                },
                                additionalProperties: false
                            }
                        },
                        additionalProperties: false
                    },
                    depth: {
                        type: 'integer',
                        format: 'int32'
                    },
                    parentName: {
                        type: 'string',
                        nullable: true
                    }
                },
                additionalProperties: false
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_FeatureManagement_FeatureProviderDto = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            nullable: true
        },
        key: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_FeatureManagement_GetFeatureListResultDto = {
    type: 'object',
    properties: {
        groups: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    name: {
                        type: 'string',
                        nullable: true
                    },
                    displayName: {
                        type: 'string',
                        nullable: true
                    },
                    features: {
                        type: 'array',
                        items: {
                            type: 'object',
                            properties: {
                                name: {
                                    type: 'string',
                                    nullable: true
                                },
                                displayName: {
                                    type: 'string',
                                    nullable: true
                                },
                                value: {
                                    type: 'string',
                                    nullable: true
                                },
                                provider: {
                                    type: 'object',
                                    properties: {
                                        name: {
                                            type: 'string',
                                            nullable: true
                                        },
                                        key: {
                                            type: 'string',
                                            nullable: true
                                        }
                                    },
                                    additionalProperties: false
                                },
                                description: {
                                    type: 'string',
                                    nullable: true
                                },
                                valueType: {
                                    type: 'object',
                                    properties: {
                                        name: {
                                            type: 'string',
                                            nullable: true,
                                            readOnly: true
                                        },
                                        properties: {
                                            type: 'object',
                                            additionalProperties: {
                                                nullable: true
                                            },
                                            nullable: true,
                                            readOnly: true
                                        },
                                        validator: {
                                            type: 'object',
                                            properties: {
                                                name: {
                                                    type: 'string',
                                                    nullable: true,
                                                    readOnly: true
                                                },
                                                properties: {
                                                    type: 'object',
                                                    additionalProperties: {
                                                        nullable: true
                                                    },
                                                    nullable: true,
                                                    readOnly: true
                                                }
                                            },
                                            additionalProperties: false
                                        }
                                    },
                                    additionalProperties: false
                                },
                                depth: {
                                    type: 'integer',
                                    format: 'int32'
                                },
                                parentName: {
                                    type: 'string',
                                    nullable: true
                                }
                            },
                            additionalProperties: false
                        },
                        nullable: true
                    }
                },
                additionalProperties: false
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_FeatureManagement_UpdateFeatureDto = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            nullable: true
        },
        value: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_FeatureManagement_UpdateFeaturesDto = {
    type: 'object',
    properties: {
        features: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    name: {
                        type: 'string',
                        nullable: true
                    },
                    value: {
                        type: 'string',
                        nullable: true
                    }
                },
                additionalProperties: false
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_Http_Modeling_ActionApiDescriptionModel = {
    type: 'object',
    properties: {
        uniqueName: {
            type: 'string',
            nullable: true
        },
        name: {
            type: 'string',
            nullable: true
        },
        httpMethod: {
            type: 'string',
            nullable: true
        },
        url: {
            type: 'string',
            nullable: true
        },
        supportedVersions: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        },
        parametersOnMethod: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    name: {
                        type: 'string',
                        nullable: true
                    },
                    typeAsString: {
                        type: 'string',
                        nullable: true
                    },
                    type: {
                        type: 'string',
                        nullable: true
                    },
                    typeSimple: {
                        type: 'string',
                        nullable: true
                    },
                    isOptional: {
                        type: 'boolean'
                    },
                    defaultValue: {
                        nullable: true
                    }
                },
                additionalProperties: false
            },
            nullable: true
        },
        parameters: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    nameOnMethod: {
                        type: 'string',
                        nullable: true
                    },
                    name: {
                        type: 'string',
                        nullable: true
                    },
                    jsonName: {
                        type: 'string',
                        nullable: true
                    },
                    type: {
                        type: 'string',
                        nullable: true
                    },
                    typeSimple: {
                        type: 'string',
                        nullable: true
                    },
                    isOptional: {
                        type: 'boolean'
                    },
                    defaultValue: {
                        nullable: true
                    },
                    constraintTypes: {
                        type: 'array',
                        items: {
                            type: 'string'
                        },
                        nullable: true
                    },
                    bindingSourceId: {
                        type: 'string',
                        nullable: true
                    },
                    descriptorName: {
                        type: 'string',
                        nullable: true
                    }
                },
                additionalProperties: false
            },
            nullable: true
        },
        returnValue: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    nullable: true
                },
                typeSimple: {
                    type: 'string',
                    nullable: true
                }
            },
            additionalProperties: false
        },
        allowAnonymous: {
            type: 'boolean',
            nullable: true
        },
        implementFrom: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_Http_Modeling_ApplicationApiDescriptionModel = {
    type: 'object',
    properties: {
        modules: {
            type: 'object',
            additionalProperties: {
                type: 'object',
                properties: {
                    rootPath: {
                        type: 'string',
                        nullable: true
                    },
                    remoteServiceName: {
                        type: 'string',
                        nullable: true
                    },
                    controllers: {
                        type: 'object',
                        additionalProperties: {
                            type: 'object',
                            properties: {
                                controllerName: {
                                    type: 'string',
                                    nullable: true
                                },
                                controllerGroupName: {
                                    type: 'string',
                                    nullable: true
                                },
                                isRemoteService: {
                                    type: 'boolean'
                                },
                                isIntegrationService: {
                                    type: 'boolean'
                                },
                                apiVersion: {
                                    type: 'string',
                                    nullable: true
                                },
                                type: {
                                    type: 'string',
                                    nullable: true
                                },
                                interfaces: {
                                    type: 'array',
                                    items: {
                                        type: 'object',
                                        properties: {
                                            type: {
                                                type: 'string',
                                                nullable: true
                                            },
                                            name: {
                                                type: 'string',
                                                nullable: true
                                            },
                                            methods: {
                                                type: 'array',
                                                items: {
                                                    type: 'object',
                                                    properties: {
                                                        name: {
                                                            type: 'string',
                                                            nullable: true
                                                        },
                                                        parametersOnMethod: {
                                                            type: 'array',
                                                            items: {
                                                                type: 'object',
                                                                properties: {
                                                                    name: {
                                                                        type: 'string',
                                                                        nullable: true
                                                                    },
                                                                    typeAsString: {
                                                                        type: 'string',
                                                                        nullable: true
                                                                    },
                                                                    type: {
                                                                        type: 'string',
                                                                        nullable: true
                                                                    },
                                                                    typeSimple: {
                                                                        type: 'string',
                                                                        nullable: true
                                                                    },
                                                                    isOptional: {
                                                                        type: 'boolean'
                                                                    },
                                                                    defaultValue: {
                                                                        nullable: true
                                                                    }
                                                                },
                                                                additionalProperties: false
                                                            },
                                                            nullable: true
                                                        },
                                                        returnValue: {
                                                            type: 'object',
                                                            properties: {
                                                                type: {
                                                                    type: 'string',
                                                                    nullable: true
                                                                },
                                                                typeSimple: {
                                                                    type: 'string',
                                                                    nullable: true
                                                                }
                                                            },
                                                            additionalProperties: false
                                                        }
                                                    },
                                                    additionalProperties: false
                                                },
                                                nullable: true
                                            }
                                        },
                                        additionalProperties: false
                                    },
                                    nullable: true
                                },
                                actions: {
                                    type: 'object',
                                    additionalProperties: {
                                        type: 'object',
                                        properties: {
                                            uniqueName: {
                                                type: 'string',
                                                nullable: true
                                            },
                                            name: {
                                                type: 'string',
                                                nullable: true
                                            },
                                            httpMethod: {
                                                type: 'string',
                                                nullable: true
                                            },
                                            url: {
                                                type: 'string',
                                                nullable: true
                                            },
                                            supportedVersions: {
                                                type: 'array',
                                                items: {
                                                    type: 'string'
                                                },
                                                nullable: true
                                            },
                                            parametersOnMethod: {
                                                type: 'array',
                                                items: {
                                                    type: 'object',
                                                    properties: {
                                                        name: {
                                                            type: 'string',
                                                            nullable: true
                                                        },
                                                        typeAsString: {
                                                            type: 'string',
                                                            nullable: true
                                                        },
                                                        type: {
                                                            type: 'string',
                                                            nullable: true
                                                        },
                                                        typeSimple: {
                                                            type: 'string',
                                                            nullable: true
                                                        },
                                                        isOptional: {
                                                            type: 'boolean'
                                                        },
                                                        defaultValue: {
                                                            nullable: true
                                                        }
                                                    },
                                                    additionalProperties: false
                                                },
                                                nullable: true
                                            },
                                            parameters: {
                                                type: 'array',
                                                items: {
                                                    type: 'object',
                                                    properties: {
                                                        nameOnMethod: {
                                                            type: 'string',
                                                            nullable: true
                                                        },
                                                        name: {
                                                            type: 'string',
                                                            nullable: true
                                                        },
                                                        jsonName: {
                                                            type: 'string',
                                                            nullable: true
                                                        },
                                                        type: {
                                                            type: 'string',
                                                            nullable: true
                                                        },
                                                        typeSimple: {
                                                            type: 'string',
                                                            nullable: true
                                                        },
                                                        isOptional: {
                                                            type: 'boolean'
                                                        },
                                                        defaultValue: {
                                                            nullable: true
                                                        },
                                                        constraintTypes: {
                                                            type: 'array',
                                                            items: {
                                                                type: 'string'
                                                            },
                                                            nullable: true
                                                        },
                                                        bindingSourceId: {
                                                            type: 'string',
                                                            nullable: true
                                                        },
                                                        descriptorName: {
                                                            type: 'string',
                                                            nullable: true
                                                        }
                                                    },
                                                    additionalProperties: false
                                                },
                                                nullable: true
                                            },
                                            returnValue: {
                                                type: 'object',
                                                properties: {
                                                    type: {
                                                        type: 'string',
                                                        nullable: true
                                                    },
                                                    typeSimple: {
                                                        type: 'string',
                                                        nullable: true
                                                    }
                                                },
                                                additionalProperties: false
                                            },
                                            allowAnonymous: {
                                                type: 'boolean',
                                                nullable: true
                                            },
                                            implementFrom: {
                                                type: 'string',
                                                nullable: true
                                            }
                                        },
                                        additionalProperties: false
                                    },
                                    nullable: true
                                }
                            },
                            additionalProperties: false
                        },
                        nullable: true
                    }
                },
                additionalProperties: false
            },
            nullable: true
        },
        types: {
            type: 'object',
            additionalProperties: {
                type: 'object',
                properties: {
                    baseType: {
                        type: 'string',
                        nullable: true
                    },
                    isEnum: {
                        type: 'boolean'
                    },
                    enumNames: {
                        type: 'array',
                        items: {
                            type: 'string'
                        },
                        nullable: true
                    },
                    enumValues: {
                        type: 'array',
                        items: {},
                        nullable: true
                    },
                    genericArguments: {
                        type: 'array',
                        items: {
                            type: 'string'
                        },
                        nullable: true
                    },
                    properties: {
                        type: 'array',
                        items: {
                            type: 'object',
                            properties: {
                                name: {
                                    type: 'string',
                                    nullable: true
                                },
                                jsonName: {
                                    type: 'string',
                                    nullable: true
                                },
                                type: {
                                    type: 'string',
                                    nullable: true
                                },
                                typeSimple: {
                                    type: 'string',
                                    nullable: true
                                },
                                isRequired: {
                                    type: 'boolean'
                                },
                                minLength: {
                                    type: 'integer',
                                    format: 'int32',
                                    nullable: true
                                },
                                maxLength: {
                                    type: 'integer',
                                    format: 'int32',
                                    nullable: true
                                },
                                minimum: {
                                    type: 'string',
                                    nullable: true
                                },
                                maximum: {
                                    type: 'string',
                                    nullable: true
                                },
                                regex: {
                                    type: 'string',
                                    nullable: true
                                }
                            },
                            additionalProperties: false
                        },
                        nullable: true
                    }
                },
                additionalProperties: false
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_Http_Modeling_ControllerApiDescriptionModel = {
    type: 'object',
    properties: {
        controllerName: {
            type: 'string',
            nullable: true
        },
        controllerGroupName: {
            type: 'string',
            nullable: true
        },
        isRemoteService: {
            type: 'boolean'
        },
        isIntegrationService: {
            type: 'boolean'
        },
        apiVersion: {
            type: 'string',
            nullable: true
        },
        type: {
            type: 'string',
            nullable: true
        },
        interfaces: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    type: {
                        type: 'string',
                        nullable: true
                    },
                    name: {
                        type: 'string',
                        nullable: true
                    },
                    methods: {
                        type: 'array',
                        items: {
                            type: 'object',
                            properties: {
                                name: {
                                    type: 'string',
                                    nullable: true
                                },
                                parametersOnMethod: {
                                    type: 'array',
                                    items: {
                                        type: 'object',
                                        properties: {
                                            name: {
                                                type: 'string',
                                                nullable: true
                                            },
                                            typeAsString: {
                                                type: 'string',
                                                nullable: true
                                            },
                                            type: {
                                                type: 'string',
                                                nullable: true
                                            },
                                            typeSimple: {
                                                type: 'string',
                                                nullable: true
                                            },
                                            isOptional: {
                                                type: 'boolean'
                                            },
                                            defaultValue: {
                                                nullable: true
                                            }
                                        },
                                        additionalProperties: false
                                    },
                                    nullable: true
                                },
                                returnValue: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            nullable: true
                                        },
                                        typeSimple: {
                                            type: 'string',
                                            nullable: true
                                        }
                                    },
                                    additionalProperties: false
                                }
                            },
                            additionalProperties: false
                        },
                        nullable: true
                    }
                },
                additionalProperties: false
            },
            nullable: true
        },
        actions: {
            type: 'object',
            additionalProperties: {
                type: 'object',
                properties: {
                    uniqueName: {
                        type: 'string',
                        nullable: true
                    },
                    name: {
                        type: 'string',
                        nullable: true
                    },
                    httpMethod: {
                        type: 'string',
                        nullable: true
                    },
                    url: {
                        type: 'string',
                        nullable: true
                    },
                    supportedVersions: {
                        type: 'array',
                        items: {
                            type: 'string'
                        },
                        nullable: true
                    },
                    parametersOnMethod: {
                        type: 'array',
                        items: {
                            type: 'object',
                            properties: {
                                name: {
                                    type: 'string',
                                    nullable: true
                                },
                                typeAsString: {
                                    type: 'string',
                                    nullable: true
                                },
                                type: {
                                    type: 'string',
                                    nullable: true
                                },
                                typeSimple: {
                                    type: 'string',
                                    nullable: true
                                },
                                isOptional: {
                                    type: 'boolean'
                                },
                                defaultValue: {
                                    nullable: true
                                }
                            },
                            additionalProperties: false
                        },
                        nullable: true
                    },
                    parameters: {
                        type: 'array',
                        items: {
                            type: 'object',
                            properties: {
                                nameOnMethod: {
                                    type: 'string',
                                    nullable: true
                                },
                                name: {
                                    type: 'string',
                                    nullable: true
                                },
                                jsonName: {
                                    type: 'string',
                                    nullable: true
                                },
                                type: {
                                    type: 'string',
                                    nullable: true
                                },
                                typeSimple: {
                                    type: 'string',
                                    nullable: true
                                },
                                isOptional: {
                                    type: 'boolean'
                                },
                                defaultValue: {
                                    nullable: true
                                },
                                constraintTypes: {
                                    type: 'array',
                                    items: {
                                        type: 'string'
                                    },
                                    nullable: true
                                },
                                bindingSourceId: {
                                    type: 'string',
                                    nullable: true
                                },
                                descriptorName: {
                                    type: 'string',
                                    nullable: true
                                }
                            },
                            additionalProperties: false
                        },
                        nullable: true
                    },
                    returnValue: {
                        type: 'object',
                        properties: {
                            type: {
                                type: 'string',
                                nullable: true
                            },
                            typeSimple: {
                                type: 'string',
                                nullable: true
                            }
                        },
                        additionalProperties: false
                    },
                    allowAnonymous: {
                        type: 'boolean',
                        nullable: true
                    },
                    implementFrom: {
                        type: 'string',
                        nullable: true
                    }
                },
                additionalProperties: false
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_Http_Modeling_ControllerInterfaceApiDescriptionModel = {
    type: 'object',
    properties: {
        type: {
            type: 'string',
            nullable: true
        },
        name: {
            type: 'string',
            nullable: true
        },
        methods: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    name: {
                        type: 'string',
                        nullable: true
                    },
                    parametersOnMethod: {
                        type: 'array',
                        items: {
                            type: 'object',
                            properties: {
                                name: {
                                    type: 'string',
                                    nullable: true
                                },
                                typeAsString: {
                                    type: 'string',
                                    nullable: true
                                },
                                type: {
                                    type: 'string',
                                    nullable: true
                                },
                                typeSimple: {
                                    type: 'string',
                                    nullable: true
                                },
                                isOptional: {
                                    type: 'boolean'
                                },
                                defaultValue: {
                                    nullable: true
                                }
                            },
                            additionalProperties: false
                        },
                        nullable: true
                    },
                    returnValue: {
                        type: 'object',
                        properties: {
                            type: {
                                type: 'string',
                                nullable: true
                            },
                            typeSimple: {
                                type: 'string',
                                nullable: true
                            }
                        },
                        additionalProperties: false
                    }
                },
                additionalProperties: false
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_Http_Modeling_InterfaceMethodApiDescriptionModel = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            nullable: true
        },
        parametersOnMethod: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    name: {
                        type: 'string',
                        nullable: true
                    },
                    typeAsString: {
                        type: 'string',
                        nullable: true
                    },
                    type: {
                        type: 'string',
                        nullable: true
                    },
                    typeSimple: {
                        type: 'string',
                        nullable: true
                    },
                    isOptional: {
                        type: 'boolean'
                    },
                    defaultValue: {
                        nullable: true
                    }
                },
                additionalProperties: false
            },
            nullable: true
        },
        returnValue: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    nullable: true
                },
                typeSimple: {
                    type: 'string',
                    nullable: true
                }
            },
            additionalProperties: false
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_Http_Modeling_MethodParameterApiDescriptionModel = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            nullable: true
        },
        typeAsString: {
            type: 'string',
            nullable: true
        },
        type: {
            type: 'string',
            nullable: true
        },
        typeSimple: {
            type: 'string',
            nullable: true
        },
        isOptional: {
            type: 'boolean'
        },
        defaultValue: {
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_Http_Modeling_ModuleApiDescriptionModel = {
    type: 'object',
    properties: {
        rootPath: {
            type: 'string',
            nullable: true
        },
        remoteServiceName: {
            type: 'string',
            nullable: true
        },
        controllers: {
            type: 'object',
            additionalProperties: {
                type: 'object',
                properties: {
                    controllerName: {
                        type: 'string',
                        nullable: true
                    },
                    controllerGroupName: {
                        type: 'string',
                        nullable: true
                    },
                    isRemoteService: {
                        type: 'boolean'
                    },
                    isIntegrationService: {
                        type: 'boolean'
                    },
                    apiVersion: {
                        type: 'string',
                        nullable: true
                    },
                    type: {
                        type: 'string',
                        nullable: true
                    },
                    interfaces: {
                        type: 'array',
                        items: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    nullable: true
                                },
                                name: {
                                    type: 'string',
                                    nullable: true
                                },
                                methods: {
                                    type: 'array',
                                    items: {
                                        type: 'object',
                                        properties: {
                                            name: {
                                                type: 'string',
                                                nullable: true
                                            },
                                            parametersOnMethod: {
                                                type: 'array',
                                                items: {
                                                    type: 'object',
                                                    properties: {
                                                        name: {
                                                            type: 'string',
                                                            nullable: true
                                                        },
                                                        typeAsString: {
                                                            type: 'string',
                                                            nullable: true
                                                        },
                                                        type: {
                                                            type: 'string',
                                                            nullable: true
                                                        },
                                                        typeSimple: {
                                                            type: 'string',
                                                            nullable: true
                                                        },
                                                        isOptional: {
                                                            type: 'boolean'
                                                        },
                                                        defaultValue: {
                                                            nullable: true
                                                        }
                                                    },
                                                    additionalProperties: false
                                                },
                                                nullable: true
                                            },
                                            returnValue: {
                                                type: 'object',
                                                properties: {
                                                    type: {
                                                        type: 'string',
                                                        nullable: true
                                                    },
                                                    typeSimple: {
                                                        type: 'string',
                                                        nullable: true
                                                    }
                                                },
                                                additionalProperties: false
                                            }
                                        },
                                        additionalProperties: false
                                    },
                                    nullable: true
                                }
                            },
                            additionalProperties: false
                        },
                        nullable: true
                    },
                    actions: {
                        type: 'object',
                        additionalProperties: {
                            type: 'object',
                            properties: {
                                uniqueName: {
                                    type: 'string',
                                    nullable: true
                                },
                                name: {
                                    type: 'string',
                                    nullable: true
                                },
                                httpMethod: {
                                    type: 'string',
                                    nullable: true
                                },
                                url: {
                                    type: 'string',
                                    nullable: true
                                },
                                supportedVersions: {
                                    type: 'array',
                                    items: {
                                        type: 'string'
                                    },
                                    nullable: true
                                },
                                parametersOnMethod: {
                                    type: 'array',
                                    items: {
                                        type: 'object',
                                        properties: {
                                            name: {
                                                type: 'string',
                                                nullable: true
                                            },
                                            typeAsString: {
                                                type: 'string',
                                                nullable: true
                                            },
                                            type: {
                                                type: 'string',
                                                nullable: true
                                            },
                                            typeSimple: {
                                                type: 'string',
                                                nullable: true
                                            },
                                            isOptional: {
                                                type: 'boolean'
                                            },
                                            defaultValue: {
                                                nullable: true
                                            }
                                        },
                                        additionalProperties: false
                                    },
                                    nullable: true
                                },
                                parameters: {
                                    type: 'array',
                                    items: {
                                        type: 'object',
                                        properties: {
                                            nameOnMethod: {
                                                type: 'string',
                                                nullable: true
                                            },
                                            name: {
                                                type: 'string',
                                                nullable: true
                                            },
                                            jsonName: {
                                                type: 'string',
                                                nullable: true
                                            },
                                            type: {
                                                type: 'string',
                                                nullable: true
                                            },
                                            typeSimple: {
                                                type: 'string',
                                                nullable: true
                                            },
                                            isOptional: {
                                                type: 'boolean'
                                            },
                                            defaultValue: {
                                                nullable: true
                                            },
                                            constraintTypes: {
                                                type: 'array',
                                                items: {
                                                    type: 'string'
                                                },
                                                nullable: true
                                            },
                                            bindingSourceId: {
                                                type: 'string',
                                                nullable: true
                                            },
                                            descriptorName: {
                                                type: 'string',
                                                nullable: true
                                            }
                                        },
                                        additionalProperties: false
                                    },
                                    nullable: true
                                },
                                returnValue: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            nullable: true
                                        },
                                        typeSimple: {
                                            type: 'string',
                                            nullable: true
                                        }
                                    },
                                    additionalProperties: false
                                },
                                allowAnonymous: {
                                    type: 'boolean',
                                    nullable: true
                                },
                                implementFrom: {
                                    type: 'string',
                                    nullable: true
                                }
                            },
                            additionalProperties: false
                        },
                        nullable: true
                    }
                },
                additionalProperties: false
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_Http_Modeling_ParameterApiDescriptionModel = {
    type: 'object',
    properties: {
        nameOnMethod: {
            type: 'string',
            nullable: true
        },
        name: {
            type: 'string',
            nullable: true
        },
        jsonName: {
            type: 'string',
            nullable: true
        },
        type: {
            type: 'string',
            nullable: true
        },
        typeSimple: {
            type: 'string',
            nullable: true
        },
        isOptional: {
            type: 'boolean'
        },
        defaultValue: {
            nullable: true
        },
        constraintTypes: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        },
        bindingSourceId: {
            type: 'string',
            nullable: true
        },
        descriptorName: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_Http_Modeling_PropertyApiDescriptionModel = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            nullable: true
        },
        jsonName: {
            type: 'string',
            nullable: true
        },
        type: {
            type: 'string',
            nullable: true
        },
        typeSimple: {
            type: 'string',
            nullable: true
        },
        isRequired: {
            type: 'boolean'
        },
        minLength: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        maxLength: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        minimum: {
            type: 'string',
            nullable: true
        },
        maximum: {
            type: 'string',
            nullable: true
        },
        regex: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_Http_Modeling_ReturnValueApiDescriptionModel = {
    type: 'object',
    properties: {
        type: {
            type: 'string',
            nullable: true
        },
        typeSimple: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_Http_Modeling_TypeApiDescriptionModel = {
    type: 'object',
    properties: {
        baseType: {
            type: 'string',
            nullable: true
        },
        isEnum: {
            type: 'boolean'
        },
        enumNames: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        },
        enumValues: {
            type: 'array',
            items: {},
            nullable: true
        },
        genericArguments: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        },
        properties: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    name: {
                        type: 'string',
                        nullable: true
                    },
                    jsonName: {
                        type: 'string',
                        nullable: true
                    },
                    type: {
                        type: 'string',
                        nullable: true
                    },
                    typeSimple: {
                        type: 'string',
                        nullable: true
                    },
                    isRequired: {
                        type: 'boolean'
                    },
                    minLength: {
                        type: 'integer',
                        format: 'int32',
                        nullable: true
                    },
                    maxLength: {
                        type: 'integer',
                        format: 'int32',
                        nullable: true
                    },
                    minimum: {
                        type: 'string',
                        nullable: true
                    },
                    maximum: {
                        type: 'string',
                        nullable: true
                    },
                    regex: {
                        type: 'string',
                        nullable: true
                    }
                },
                additionalProperties: false
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_Http_RemoteServiceErrorInfo = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            nullable: true
        },
        message: {
            type: 'string',
            nullable: true
        },
        details: {
            type: 'string',
            nullable: true
        },
        data: {
            type: 'object',
            additionalProperties: {},
            nullable: true
        },
        validationErrors: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    message: {
                        type: 'string',
                        nullable: true
                    },
                    members: {
                        type: 'array',
                        items: {
                            type: 'string'
                        },
                        nullable: true
                    }
                },
                additionalProperties: false
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_Http_RemoteServiceErrorResponse = {
    type: 'object',
    properties: {
        error: {
            type: 'object',
            properties: {
                code: {
                    type: 'string',
                    nullable: true
                },
                message: {
                    type: 'string',
                    nullable: true
                },
                details: {
                    type: 'string',
                    nullable: true
                },
                data: {
                    type: 'object',
                    additionalProperties: {},
                    nullable: true
                },
                validationErrors: {
                    type: 'array',
                    items: {
                        type: 'object',
                        properties: {
                            message: {
                                type: 'string',
                                nullable: true
                            },
                            members: {
                                type: 'array',
                                items: {
                                    type: 'string'
                                },
                                nullable: true
                            }
                        },
                        additionalProperties: false
                    },
                    nullable: true
                }
            },
            additionalProperties: false
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_Http_RemoteServiceValidationErrorInfo = {
    type: 'object',
    properties: {
        message: {
            type: 'string',
            nullable: true
        },
        members: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_Identity_IdentityRoleCreateDto = {
    required: ['name'],
    type: 'object',
    properties: {
        extraProperties: {
            type: 'object',
            additionalProperties: {},
            nullable: true,
            readOnly: true
        },
        name: {
            maxLength: 256,
            minLength: 0,
            type: 'string'
        },
        isDefault: {
            type: 'boolean'
        },
        isPublic: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_Identity_IdentityRoleDto = {
    type: 'object',
    properties: {
        extraProperties: {
            type: 'object',
            additionalProperties: {},
            nullable: true,
            readOnly: true
        },
        id: {
            type: 'string',
            format: 'uuid'
        },
        name: {
            type: 'string',
            nullable: true
        },
        isDefault: {
            type: 'boolean'
        },
        isStatic: {
            type: 'boolean'
        },
        isPublic: {
            type: 'boolean'
        },
        concurrencyStamp: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_Identity_IdentityRoleUpdateDto = {
    required: ['name'],
    type: 'object',
    properties: {
        extraProperties: {
            type: 'object',
            additionalProperties: {},
            nullable: true,
            readOnly: true
        },
        name: {
            maxLength: 256,
            minLength: 0,
            type: 'string'
        },
        isDefault: {
            type: 'boolean'
        },
        isPublic: {
            type: 'boolean'
        },
        concurrencyStamp: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_Identity_IdentityUserCreateDto = {
    required: ['email', 'password', 'userName'],
    type: 'object',
    properties: {
        extraProperties: {
            type: 'object',
            additionalProperties: {},
            nullable: true,
            readOnly: true
        },
        userName: {
            maxLength: 256,
            minLength: 0,
            type: 'string'
        },
        name: {
            maxLength: 64,
            minLength: 0,
            type: 'string',
            nullable: true
        },
        surname: {
            maxLength: 64,
            minLength: 0,
            type: 'string',
            nullable: true
        },
        email: {
            maxLength: 256,
            minLength: 0,
            type: 'string',
            format: 'email'
        },
        phoneNumber: {
            maxLength: 16,
            minLength: 0,
            type: 'string',
            nullable: true
        },
        isActive: {
            type: 'boolean'
        },
        lockoutEnabled: {
            type: 'boolean'
        },
        roleNames: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        },
        password: {
            maxLength: 128,
            minLength: 0,
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_Identity_IdentityUserDto = {
    type: 'object',
    properties: {
        extraProperties: {
            type: 'object',
            additionalProperties: {},
            nullable: true,
            readOnly: true
        },
        id: {
            type: 'string',
            format: 'uuid'
        },
        creationTime: {
            type: 'string',
            format: 'date-time'
        },
        creatorId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        lastModificationTime: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        lastModifierId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        isDeleted: {
            type: 'boolean'
        },
        deleterId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        deletionTime: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        tenantId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        userName: {
            type: 'string',
            nullable: true
        },
        name: {
            type: 'string',
            nullable: true
        },
        surname: {
            type: 'string',
            nullable: true
        },
        email: {
            type: 'string',
            nullable: true
        },
        emailConfirmed: {
            type: 'boolean'
        },
        phoneNumber: {
            type: 'string',
            nullable: true
        },
        phoneNumberConfirmed: {
            type: 'boolean'
        },
        isActive: {
            type: 'boolean'
        },
        lockoutEnabled: {
            type: 'boolean'
        },
        accessFailedCount: {
            type: 'integer',
            format: 'int32'
        },
        lockoutEnd: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        concurrencyStamp: {
            type: 'string',
            nullable: true
        },
        entityVersion: {
            type: 'integer',
            format: 'int32'
        },
        lastPasswordChangeTime: {
            type: 'string',
            format: 'date-time',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_Identity_IdentityUserUpdateDto = {
    required: ['email', 'userName'],
    type: 'object',
    properties: {
        extraProperties: {
            type: 'object',
            additionalProperties: {},
            nullable: true,
            readOnly: true
        },
        userName: {
            maxLength: 256,
            minLength: 0,
            type: 'string'
        },
        name: {
            maxLength: 64,
            minLength: 0,
            type: 'string',
            nullable: true
        },
        surname: {
            maxLength: 64,
            minLength: 0,
            type: 'string',
            nullable: true
        },
        email: {
            maxLength: 256,
            minLength: 0,
            type: 'string',
            format: 'email'
        },
        phoneNumber: {
            maxLength: 16,
            minLength: 0,
            type: 'string',
            nullable: true
        },
        isActive: {
            type: 'boolean'
        },
        lockoutEnabled: {
            type: 'boolean'
        },
        roleNames: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        },
        password: {
            maxLength: 128,
            minLength: 0,
            type: 'string',
            nullable: true
        },
        concurrencyStamp: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_Identity_IdentityUserUpdateRolesDto = {
    required: ['roleNames'],
    type: 'object',
    properties: {
        roleNames: {
            type: 'array',
            items: {
                type: 'string'
            }
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_Localization_LanguageInfo = {
    type: 'object',
    properties: {
        cultureName: {
            type: 'string',
            nullable: true
        },
        uiCultureName: {
            type: 'string',
            nullable: true
        },
        displayName: {
            type: 'string',
            nullable: true
        },
        twoLetterISOLanguageName: {
            type: 'string',
            nullable: true,
            readOnly: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_NameValue = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            nullable: true
        },
        value: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_PermissionManagement_GetPermissionListResultDto = {
    type: 'object',
    properties: {
        entityDisplayName: {
            type: 'string',
            nullable: true
        },
        groups: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    name: {
                        type: 'string',
                        nullable: true
                    },
                    displayName: {
                        type: 'string',
                        nullable: true
                    },
                    displayNameKey: {
                        type: 'string',
                        nullable: true
                    },
                    displayNameResource: {
                        type: 'string',
                        nullable: true
                    },
                    permissions: {
                        type: 'array',
                        items: {
                            type: 'object',
                            properties: {
                                name: {
                                    type: 'string',
                                    nullable: true
                                },
                                displayName: {
                                    type: 'string',
                                    nullable: true
                                },
                                parentName: {
                                    type: 'string',
                                    nullable: true
                                },
                                isGranted: {
                                    type: 'boolean'
                                },
                                allowedProviders: {
                                    type: 'array',
                                    items: {
                                        type: 'string'
                                    },
                                    nullable: true
                                },
                                grantedProviders: {
                                    type: 'array',
                                    items: {
                                        type: 'object',
                                        properties: {
                                            providerName: {
                                                type: 'string',
                                                nullable: true
                                            },
                                            providerKey: {
                                                type: 'string',
                                                nullable: true
                                            }
                                        },
                                        additionalProperties: false
                                    },
                                    nullable: true
                                }
                            },
                            additionalProperties: false
                        },
                        nullable: true
                    }
                },
                additionalProperties: false
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_PermissionManagement_PermissionGrantInfoDto = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            nullable: true
        },
        displayName: {
            type: 'string',
            nullable: true
        },
        parentName: {
            type: 'string',
            nullable: true
        },
        isGranted: {
            type: 'boolean'
        },
        allowedProviders: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        },
        grantedProviders: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    providerName: {
                        type: 'string',
                        nullable: true
                    },
                    providerKey: {
                        type: 'string',
                        nullable: true
                    }
                },
                additionalProperties: false
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_PermissionManagement_PermissionGroupDto = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            nullable: true
        },
        displayName: {
            type: 'string',
            nullable: true
        },
        displayNameKey: {
            type: 'string',
            nullable: true
        },
        displayNameResource: {
            type: 'string',
            nullable: true
        },
        permissions: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    name: {
                        type: 'string',
                        nullable: true
                    },
                    displayName: {
                        type: 'string',
                        nullable: true
                    },
                    parentName: {
                        type: 'string',
                        nullable: true
                    },
                    isGranted: {
                        type: 'boolean'
                    },
                    allowedProviders: {
                        type: 'array',
                        items: {
                            type: 'string'
                        },
                        nullable: true
                    },
                    grantedProviders: {
                        type: 'array',
                        items: {
                            type: 'object',
                            properties: {
                                providerName: {
                                    type: 'string',
                                    nullable: true
                                },
                                providerKey: {
                                    type: 'string',
                                    nullable: true
                                }
                            },
                            additionalProperties: false
                        },
                        nullable: true
                    }
                },
                additionalProperties: false
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_PermissionManagement_ProviderInfoDto = {
    type: 'object',
    properties: {
        providerName: {
            type: 'string',
            nullable: true
        },
        providerKey: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_PermissionManagement_UpdatePermissionDto = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            nullable: true
        },
        isGranted: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_PermissionManagement_UpdatePermissionsDto = {
    type: 'object',
    properties: {
        permissions: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    name: {
                        type: 'string',
                        nullable: true
                    },
                    isGranted: {
                        type: 'boolean'
                    }
                },
                additionalProperties: false
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_SettingManagement_EmailSettingsDto = {
    type: 'object',
    properties: {
        smtpHost: {
            type: 'string',
            nullable: true
        },
        smtpPort: {
            type: 'integer',
            format: 'int32'
        },
        smtpUserName: {
            type: 'string',
            nullable: true
        },
        smtpPassword: {
            type: 'string',
            nullable: true
        },
        smtpDomain: {
            type: 'string',
            nullable: true
        },
        smtpEnableSsl: {
            type: 'boolean'
        },
        smtpUseDefaultCredentials: {
            type: 'boolean'
        },
        defaultFromAddress: {
            type: 'string',
            nullable: true
        },
        defaultFromDisplayName: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_SettingManagement_SendTestEmailInput = {
    required: ['senderEmailAddress', 'subject', 'targetEmailAddress'],
    type: 'object',
    properties: {
        senderEmailAddress: {
            minLength: 1,
            type: 'string'
        },
        targetEmailAddress: {
            minLength: 1,
            type: 'string'
        },
        subject: {
            minLength: 1,
            type: 'string'
        },
        body: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_SettingManagement_UpdateEmailSettingsDto = {
    required: ['defaultFromAddress', 'defaultFromDisplayName'],
    type: 'object',
    properties: {
        smtpHost: {
            maxLength: 256,
            type: 'string',
            nullable: true
        },
        smtpPort: {
            maximum: 65535,
            minimum: 1,
            type: 'integer',
            format: 'int32'
        },
        smtpUserName: {
            maxLength: 1024,
            type: 'string',
            nullable: true
        },
        smtpPassword: {
            maxLength: 1024,
            type: 'string',
            format: 'password',
            nullable: true
        },
        smtpDomain: {
            maxLength: 1024,
            type: 'string',
            nullable: true
        },
        smtpEnableSsl: {
            type: 'boolean'
        },
        smtpUseDefaultCredentials: {
            type: 'boolean'
        },
        defaultFromAddress: {
            maxLength: 1024,
            minLength: 1,
            type: 'string'
        },
        defaultFromDisplayName: {
            maxLength: 1024,
            minLength: 1,
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_TenantManagement_TenantCreateDto = {
    required: ['adminEmailAddress', 'adminPassword', 'name'],
    type: 'object',
    properties: {
        extraProperties: {
            type: 'object',
            additionalProperties: {},
            nullable: true,
            readOnly: true
        },
        name: {
            maxLength: 64,
            minLength: 0,
            type: 'string'
        },
        adminEmailAddress: {
            maxLength: 256,
            minLength: 1,
            type: 'string',
            format: 'email'
        },
        adminPassword: {
            maxLength: 128,
            minLength: 1,
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_TenantManagement_TenantDto = {
    type: 'object',
    properties: {
        extraProperties: {
            type: 'object',
            additionalProperties: {},
            nullable: true,
            readOnly: true
        },
        id: {
            type: 'string',
            format: 'uuid'
        },
        name: {
            type: 'string',
            nullable: true
        },
        concurrencyStamp: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_TenantManagement_TenantUpdateDto = {
    required: ['name'],
    type: 'object',
    properties: {
        extraProperties: {
            type: 'object',
            additionalProperties: {},
            nullable: true,
            readOnly: true
        },
        name: {
            maxLength: 64,
            minLength: 0,
            type: 'string'
        },
        concurrencyStamp: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_Users_UserData = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        tenantId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        userName: {
            type: 'string',
            nullable: true
        },
        name: {
            type: 'string',
            nullable: true
        },
        surname: {
            type: 'string',
            nullable: true
        },
        isActive: {
            type: 'boolean'
        },
        email: {
            type: 'string',
            nullable: true
        },
        emailConfirmed: {
            type: 'boolean'
        },
        phoneNumber: {
            type: 'string',
            nullable: true
        },
        phoneNumberConfirmed: {
            type: 'boolean'
        },
        extraProperties: {
            type: 'object',
            additionalProperties: {},
            nullable: true,
            readOnly: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_Validation_StringValues_IStringValueType = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            nullable: true,
            readOnly: true
        },
        properties: {
            type: 'object',
            additionalProperties: {
                nullable: true
            },
            nullable: true,
            readOnly: true
        },
        validator: {
            type: 'object',
            properties: {
                name: {
                    type: 'string',
                    nullable: true,
                    readOnly: true
                },
                properties: {
                    type: 'object',
                    additionalProperties: {
                        nullable: true
                    },
                    nullable: true,
                    readOnly: true
                }
            },
            additionalProperties: false
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_Validation_StringValues_IValueValidator = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            nullable: true,
            readOnly: true
        },
        properties: {
            type: 'object',
            additionalProperties: {
                nullable: true
            },
            nullable: true,
            readOnly: true
        }
    },
    additionalProperties: false
} as const;